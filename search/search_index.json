{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages ponycheck","title":"ponycheck"},{"location":"ponycheck--index/","text":"Ponycheck is a library for property based testing with tight integration into ponytest. Property Based Testing \u00b6 In traditional unit testing the developer specifies one or more input examples manually for the class or system under test and assert on certain output conditions. The difficulty here is to find enough examples to cover all branches and cases of the class or system under test. In property bases testing the developer defines a property, a kind of predicate for the class or system under test that should hold for all kinds or just a subset of possible input values. The property based testing engine then generates a big number of random input values and checks if the property holds for all of them. The developer only needs to specify the possible set of input values using a Generator. This testing technique is great for finding edge cases that would easily go unnoticed with manually constructed test samples. In general it can lead to much higher coverage than traditional unit-testing, with much less code to write. How Ponycheck implements Property Based Testing \u00b6 A property based test in ponycheck consists of the following: A name (for integration into ponytest mostly) One or more generators, depending on how your property is layed out. There are tons of them defined on primitive Generators . A property method that asserts a certain property for each sample generated by the Generator(s) with the help of PropertyHelper which tries to expose a similar API as TestHelper . Optionally, the method params() can be used to configure how ponycheck executes the property by specifying a custom PropertyParams object. The classical list-reverse example: use \"collections\" use \"ponycheck\" class ListReverseProperty is Property1[List[USize]] fun name(): String => \"list/reverse\" fun gen(): Generator[List[USize]] => Generators.list_of[USize](Generators.usize()) fun property(arg1: List[USize], ph: PropertyHelper) => ph.array_eq[USize](arg1, arg1.reverse().reverse()) Integration into Ponytest \u00b6 There are two ways of integrating a Property into ponytest : In order to pass your Property to the ponytest engine, you need to wrap it inside a Property1UnitTest . actor Main is TestList new create(env: Env) => PonyTest(env, this) fun tag tests(test: PonyTest) => test(Property1UnitTest[String](MyStringProperty)) Run as much Properties as you wish inside one ponytest UnitTest using the convenience function Ponycheck.for_all providing a Generator , the TestHelper and the actual property function. (Note that the property function is supplied in a second application of the result to for_all .) class ListReversePropertyWithinAUnitTest is UnitTest fun name(): String => \"list/reverse/forall\" fun apply(h: TestHelper) => let gen = recover val Generators.list_of[USize](Generators.usize()) end Ponycheck.for_all[List[USize]](gen, h)( {(sample, ph) => ph.array_eq[Usize](arg1, arg1.reverse().reverse()) }) // ... possibly more properties, using ``Ponycheck.for_all`` Independent of how you integrate with ponytest , the ponycheck machinery will instantiate the provided Generator, and will execute it for a configurable number of samples. If the property fails using an assertion method of PropertyHelper , the failed example will be shrunken by the generator to obtain a smaller and more informative, still failing, sample for reporting. Public Types \u00b6 class Randomness interface PropertyLogger interface PropertyResultNotify actor PropertyRunner class PropertyHelper class PropertyParams trait Property1 trait Property2 trait Property3 trait Property4 class Poperator primitive Ponycheck class IntPropertySample trait IntProperty class IntPairPropertySample trait IntPairProperty type ValueAndShrink type GenerateResult class CountdownIter trait GenObj class Generator type WeightedGenerator primitive Generators class ForAll class ForAll2 class ForAll3 class ForAll4 primitive ASCIINUL primitive ASCIIDigits primitive ASCIIWhiteSpace primitive ASCIIPunctuation primitive ASCIILettersLower primitive ASCIILettersUpper primitive ASCIILetters primitive ASCIIPrintable primitive ASCIINonPrintable primitive ASCIIAll primitive ASCIIAllWithNUL type ASCIIRange","title":"Package"},{"location":"ponycheck--index/#property-based-testing","text":"In traditional unit testing the developer specifies one or more input examples manually for the class or system under test and assert on certain output conditions. The difficulty here is to find enough examples to cover all branches and cases of the class or system under test. In property bases testing the developer defines a property, a kind of predicate for the class or system under test that should hold for all kinds or just a subset of possible input values. The property based testing engine then generates a big number of random input values and checks if the property holds for all of them. The developer only needs to specify the possible set of input values using a Generator. This testing technique is great for finding edge cases that would easily go unnoticed with manually constructed test samples. In general it can lead to much higher coverage than traditional unit-testing, with much less code to write.","title":"Property Based Testing"},{"location":"ponycheck--index/#how-ponycheck-implements-property-based-testing","text":"A property based test in ponycheck consists of the following: A name (for integration into ponytest mostly) One or more generators, depending on how your property is layed out. There are tons of them defined on primitive Generators . A property method that asserts a certain property for each sample generated by the Generator(s) with the help of PropertyHelper which tries to expose a similar API as TestHelper . Optionally, the method params() can be used to configure how ponycheck executes the property by specifying a custom PropertyParams object. The classical list-reverse example: use \"collections\" use \"ponycheck\" class ListReverseProperty is Property1[List[USize]] fun name(): String => \"list/reverse\" fun gen(): Generator[List[USize]] => Generators.list_of[USize](Generators.usize()) fun property(arg1: List[USize], ph: PropertyHelper) => ph.array_eq[USize](arg1, arg1.reverse().reverse())","title":"How Ponycheck implements Property Based Testing"},{"location":"ponycheck--index/#integration-into-ponytest","text":"There are two ways of integrating a Property into ponytest : In order to pass your Property to the ponytest engine, you need to wrap it inside a Property1UnitTest . actor Main is TestList new create(env: Env) => PonyTest(env, this) fun tag tests(test: PonyTest) => test(Property1UnitTest[String](MyStringProperty)) Run as much Properties as you wish inside one ponytest UnitTest using the convenience function Ponycheck.for_all providing a Generator , the TestHelper and the actual property function. (Note that the property function is supplied in a second application of the result to for_all .) class ListReversePropertyWithinAUnitTest is UnitTest fun name(): String => \"list/reverse/forall\" fun apply(h: TestHelper) => let gen = recover val Generators.list_of[USize](Generators.usize()) end Ponycheck.for_all[List[USize]](gen, h)( {(sample, ph) => ph.array_eq[Usize](arg1, arg1.reverse().reverse()) }) // ... possibly more properties, using ``Ponycheck.for_all`` Independent of how you integrate with ponytest , the ponycheck machinery will instantiate the provided Generator, and will execute it for a configurable number of samples. If the property fails using an assertion method of PropertyHelper , the failed example will be shrunken by the generator to obtain a smaller and more informative, still failing, sample for reporting.","title":"Integration into Ponytest"},{"location":"ponycheck--index/#public-types","text":"class Randomness interface PropertyLogger interface PropertyResultNotify actor PropertyRunner class PropertyHelper class PropertyParams trait Property1 trait Property2 trait Property3 trait Property4 class Poperator primitive Ponycheck class IntPropertySample trait IntProperty class IntPairPropertySample trait IntPairProperty type ValueAndShrink type GenerateResult class CountdownIter trait GenObj class Generator type WeightedGenerator primitive Generators class ForAll class ForAll2 class ForAll3 class ForAll4 primitive ASCIINUL primitive ASCIIDigits primitive ASCIIWhiteSpace primitive ASCIIPunctuation primitive ASCIILettersLower primitive ASCIILettersUpper primitive ASCIILetters primitive ASCIIPrintable primitive ASCIINonPrintable primitive ASCIIAll primitive ASCIIAllWithNUL type ASCIIRange","title":"Public Types"},{"location":"ponycheck-ASCIIAll/","text":"ASCIIAll \u00b6 [Source] represents all ASCII characters excluding the NUL (\\x00) character for its special treatment in C strings primitive val ASCIIAll Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIIAll val^ Returns \u00b6 ASCIIAll val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIIAll val) : Bool val Parameters \u00b6 that: ASCIIAll val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIIAll val) : Bool val Parameters \u00b6 that: ASCIIAll val Returns \u00b6 Bool val","title":"primitive ASCIIAll"},{"location":"ponycheck-ASCIIAll/#asciiall","text":"[Source] represents all ASCII characters excluding the NUL (\\x00) character for its special treatment in C strings primitive val ASCIIAll","title":"ASCIIAll"},{"location":"ponycheck-ASCIIAll/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIIAll/#create","text":"[Source] new val create() : ASCIIAll val^","title":"create"},{"location":"ponycheck-ASCIIAll/#returns","text":"ASCIIAll val^","title":"Returns"},{"location":"ponycheck-ASCIIAll/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIIAll/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIIAll/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIIAll/#eq","text":"[Source] fun box eq( that: ASCIIAll val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIIAll/#parameters","text":"that: ASCIIAll val","title":"Parameters"},{"location":"ponycheck-ASCIIAll/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIAll/#ne","text":"[Source] fun box ne( that: ASCIIAll val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIIAll/#parameters_1","text":"that: ASCIIAll val","title":"Parameters"},{"location":"ponycheck-ASCIIAll/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIAllWithNUL/","text":"ASCIIAllWithNUL \u00b6 [Source] represents all ASCII characters including the NUL (\\x00) character for its special treatment in C strings primitive val ASCIIAllWithNUL Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIIAllWithNUL val^ Returns \u00b6 ASCIIAllWithNUL val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIIAllWithNUL val) : Bool val Parameters \u00b6 that: ASCIIAllWithNUL val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIIAllWithNUL val) : Bool val Parameters \u00b6 that: ASCIIAllWithNUL val Returns \u00b6 Bool val","title":"primitive ASCIIAllWithNUL"},{"location":"ponycheck-ASCIIAllWithNUL/#asciiallwithnul","text":"[Source] represents all ASCII characters including the NUL (\\x00) character for its special treatment in C strings primitive val ASCIIAllWithNUL","title":"ASCIIAllWithNUL"},{"location":"ponycheck-ASCIIAllWithNUL/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIIAllWithNUL/#create","text":"[Source] new val create() : ASCIIAllWithNUL val^","title":"create"},{"location":"ponycheck-ASCIIAllWithNUL/#returns","text":"ASCIIAllWithNUL val^","title":"Returns"},{"location":"ponycheck-ASCIIAllWithNUL/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIIAllWithNUL/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIIAllWithNUL/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIIAllWithNUL/#eq","text":"[Source] fun box eq( that: ASCIIAllWithNUL val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIIAllWithNUL/#parameters","text":"that: ASCIIAllWithNUL val","title":"Parameters"},{"location":"ponycheck-ASCIIAllWithNUL/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIAllWithNUL/#ne","text":"[Source] fun box ne( that: ASCIIAllWithNUL val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIIAllWithNUL/#parameters_1","text":"that: ASCIIAllWithNUL val","title":"Parameters"},{"location":"ponycheck-ASCIIAllWithNUL/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIDigits/","text":"ASCIIDigits \u00b6 [Source] primitive val ASCIIDigits Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIIDigits val^ Returns \u00b6 ASCIIDigits val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIIDigits val) : Bool val Parameters \u00b6 that: ASCIIDigits val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIIDigits val) : Bool val Parameters \u00b6 that: ASCIIDigits val Returns \u00b6 Bool val","title":"primitive ASCIIDigits"},{"location":"ponycheck-ASCIIDigits/#asciidigits","text":"[Source] primitive val ASCIIDigits","title":"ASCIIDigits"},{"location":"ponycheck-ASCIIDigits/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIIDigits/#create","text":"[Source] new val create() : ASCIIDigits val^","title":"create"},{"location":"ponycheck-ASCIIDigits/#returns","text":"ASCIIDigits val^","title":"Returns"},{"location":"ponycheck-ASCIIDigits/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIIDigits/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIIDigits/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIIDigits/#eq","text":"[Source] fun box eq( that: ASCIIDigits val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIIDigits/#parameters","text":"that: ASCIIDigits val","title":"Parameters"},{"location":"ponycheck-ASCIIDigits/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIDigits/#ne","text":"[Source] fun box ne( that: ASCIIDigits val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIIDigits/#parameters_1","text":"that: ASCIIDigits val","title":"Parameters"},{"location":"ponycheck-ASCIIDigits/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIILetters/","text":"ASCIILetters \u00b6 [Source] primitive val ASCIILetters Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIILetters val^ Returns \u00b6 ASCIILetters val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIILetters val) : Bool val Parameters \u00b6 that: ASCIILetters val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIILetters val) : Bool val Parameters \u00b6 that: ASCIILetters val Returns \u00b6 Bool val","title":"primitive ASCIILetters"},{"location":"ponycheck-ASCIILetters/#asciiletters","text":"[Source] primitive val ASCIILetters","title":"ASCIILetters"},{"location":"ponycheck-ASCIILetters/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIILetters/#create","text":"[Source] new val create() : ASCIILetters val^","title":"create"},{"location":"ponycheck-ASCIILetters/#returns","text":"ASCIILetters val^","title":"Returns"},{"location":"ponycheck-ASCIILetters/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIILetters/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIILetters/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIILetters/#eq","text":"[Source] fun box eq( that: ASCIILetters val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIILetters/#parameters","text":"that: ASCIILetters val","title":"Parameters"},{"location":"ponycheck-ASCIILetters/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIILetters/#ne","text":"[Source] fun box ne( that: ASCIILetters val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIILetters/#parameters_1","text":"that: ASCIILetters val","title":"Parameters"},{"location":"ponycheck-ASCIILetters/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIILettersLower/","text":"ASCIILettersLower \u00b6 [Source] primitive val ASCIILettersLower Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIILettersLower val^ Returns \u00b6 ASCIILettersLower val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIILettersLower val) : Bool val Parameters \u00b6 that: ASCIILettersLower val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIILettersLower val) : Bool val Parameters \u00b6 that: ASCIILettersLower val Returns \u00b6 Bool val","title":"primitive ASCIILettersLower"},{"location":"ponycheck-ASCIILettersLower/#asciiletterslower","text":"[Source] primitive val ASCIILettersLower","title":"ASCIILettersLower"},{"location":"ponycheck-ASCIILettersLower/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIILettersLower/#create","text":"[Source] new val create() : ASCIILettersLower val^","title":"create"},{"location":"ponycheck-ASCIILettersLower/#returns","text":"ASCIILettersLower val^","title":"Returns"},{"location":"ponycheck-ASCIILettersLower/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIILettersLower/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIILettersLower/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIILettersLower/#eq","text":"[Source] fun box eq( that: ASCIILettersLower val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIILettersLower/#parameters","text":"that: ASCIILettersLower val","title":"Parameters"},{"location":"ponycheck-ASCIILettersLower/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIILettersLower/#ne","text":"[Source] fun box ne( that: ASCIILettersLower val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIILettersLower/#parameters_1","text":"that: ASCIILettersLower val","title":"Parameters"},{"location":"ponycheck-ASCIILettersLower/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIILettersUpper/","text":"ASCIILettersUpper \u00b6 [Source] primitive val ASCIILettersUpper Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIILettersUpper val^ Returns \u00b6 ASCIILettersUpper val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIILettersUpper val) : Bool val Parameters \u00b6 that: ASCIILettersUpper val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIILettersUpper val) : Bool val Parameters \u00b6 that: ASCIILettersUpper val Returns \u00b6 Bool val","title":"primitive ASCIILettersUpper"},{"location":"ponycheck-ASCIILettersUpper/#asciilettersupper","text":"[Source] primitive val ASCIILettersUpper","title":"ASCIILettersUpper"},{"location":"ponycheck-ASCIILettersUpper/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIILettersUpper/#create","text":"[Source] new val create() : ASCIILettersUpper val^","title":"create"},{"location":"ponycheck-ASCIILettersUpper/#returns","text":"ASCIILettersUpper val^","title":"Returns"},{"location":"ponycheck-ASCIILettersUpper/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIILettersUpper/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIILettersUpper/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIILettersUpper/#eq","text":"[Source] fun box eq( that: ASCIILettersUpper val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIILettersUpper/#parameters","text":"that: ASCIILettersUpper val","title":"Parameters"},{"location":"ponycheck-ASCIILettersUpper/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIILettersUpper/#ne","text":"[Source] fun box ne( that: ASCIILettersUpper val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIILettersUpper/#parameters_1","text":"that: ASCIILettersUpper val","title":"Parameters"},{"location":"ponycheck-ASCIILettersUpper/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIINUL/","text":"ASCIINUL \u00b6 [Source] primitive val ASCIINUL Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIINUL val^ Returns \u00b6 ASCIINUL val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIINUL val) : Bool val Parameters \u00b6 that: ASCIINUL val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIINUL val) : Bool val Parameters \u00b6 that: ASCIINUL val Returns \u00b6 Bool val","title":"primitive ASCIINUL"},{"location":"ponycheck-ASCIINUL/#asciinul","text":"[Source] primitive val ASCIINUL","title":"ASCIINUL"},{"location":"ponycheck-ASCIINUL/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIINUL/#create","text":"[Source] new val create() : ASCIINUL val^","title":"create"},{"location":"ponycheck-ASCIINUL/#returns","text":"ASCIINUL val^","title":"Returns"},{"location":"ponycheck-ASCIINUL/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIINUL/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIINUL/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIINUL/#eq","text":"[Source] fun box eq( that: ASCIINUL val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIINUL/#parameters","text":"that: ASCIINUL val","title":"Parameters"},{"location":"ponycheck-ASCIINUL/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIINUL/#ne","text":"[Source] fun box ne( that: ASCIINUL val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIINUL/#parameters_1","text":"that: ASCIINUL val","title":"Parameters"},{"location":"ponycheck-ASCIINUL/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIINonPrintable/","text":"ASCIINonPrintable \u00b6 [Source] primitive val ASCIINonPrintable Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIINonPrintable val^ Returns \u00b6 ASCIINonPrintable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIINonPrintable val) : Bool val Parameters \u00b6 that: ASCIINonPrintable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIINonPrintable val) : Bool val Parameters \u00b6 that: ASCIINonPrintable val Returns \u00b6 Bool val","title":"primitive ASCIINonPrintable"},{"location":"ponycheck-ASCIINonPrintable/#asciinonprintable","text":"[Source] primitive val ASCIINonPrintable","title":"ASCIINonPrintable"},{"location":"ponycheck-ASCIINonPrintable/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIINonPrintable/#create","text":"[Source] new val create() : ASCIINonPrintable val^","title":"create"},{"location":"ponycheck-ASCIINonPrintable/#returns","text":"ASCIINonPrintable val^","title":"Returns"},{"location":"ponycheck-ASCIINonPrintable/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIINonPrintable/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIINonPrintable/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIINonPrintable/#eq","text":"[Source] fun box eq( that: ASCIINonPrintable val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIINonPrintable/#parameters","text":"that: ASCIINonPrintable val","title":"Parameters"},{"location":"ponycheck-ASCIINonPrintable/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIINonPrintable/#ne","text":"[Source] fun box ne( that: ASCIINonPrintable val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIINonPrintable/#parameters_1","text":"that: ASCIINonPrintable val","title":"Parameters"},{"location":"ponycheck-ASCIINonPrintable/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIPrintable/","text":"ASCIIPrintable \u00b6 [Source] primitive val ASCIIPrintable Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIIPrintable val^ Returns \u00b6 ASCIIPrintable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIIPrintable val) : Bool val Parameters \u00b6 that: ASCIIPrintable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIIPrintable val) : Bool val Parameters \u00b6 that: ASCIIPrintable val Returns \u00b6 Bool val","title":"primitive ASCIIPrintable"},{"location":"ponycheck-ASCIIPrintable/#asciiprintable","text":"[Source] primitive val ASCIIPrintable","title":"ASCIIPrintable"},{"location":"ponycheck-ASCIIPrintable/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIIPrintable/#create","text":"[Source] new val create() : ASCIIPrintable val^","title":"create"},{"location":"ponycheck-ASCIIPrintable/#returns","text":"ASCIIPrintable val^","title":"Returns"},{"location":"ponycheck-ASCIIPrintable/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIIPrintable/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIIPrintable/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIIPrintable/#eq","text":"[Source] fun box eq( that: ASCIIPrintable val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIIPrintable/#parameters","text":"that: ASCIIPrintable val","title":"Parameters"},{"location":"ponycheck-ASCIIPrintable/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIPrintable/#ne","text":"[Source] fun box ne( that: ASCIIPrintable val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIIPrintable/#parameters_1","text":"that: ASCIIPrintable val","title":"Parameters"},{"location":"ponycheck-ASCIIPrintable/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIPunctuation/","text":"ASCIIPunctuation \u00b6 [Source] primitive val ASCIIPunctuation Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIIPunctuation val^ Returns \u00b6 ASCIIPunctuation val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIIPunctuation val) : Bool val Parameters \u00b6 that: ASCIIPunctuation val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIIPunctuation val) : Bool val Parameters \u00b6 that: ASCIIPunctuation val Returns \u00b6 Bool val","title":"primitive ASCIIPunctuation"},{"location":"ponycheck-ASCIIPunctuation/#asciipunctuation","text":"[Source] primitive val ASCIIPunctuation","title":"ASCIIPunctuation"},{"location":"ponycheck-ASCIIPunctuation/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIIPunctuation/#create","text":"[Source] new val create() : ASCIIPunctuation val^","title":"create"},{"location":"ponycheck-ASCIIPunctuation/#returns","text":"ASCIIPunctuation val^","title":"Returns"},{"location":"ponycheck-ASCIIPunctuation/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIIPunctuation/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIIPunctuation/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIIPunctuation/#eq","text":"[Source] fun box eq( that: ASCIIPunctuation val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIIPunctuation/#parameters","text":"that: ASCIIPunctuation val","title":"Parameters"},{"location":"ponycheck-ASCIIPunctuation/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIPunctuation/#ne","text":"[Source] fun box ne( that: ASCIIPunctuation val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIIPunctuation/#parameters_1","text":"that: ASCIIPunctuation val","title":"Parameters"},{"location":"ponycheck-ASCIIPunctuation/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIRange/","text":"ASCIIRange \u00b6 [Source] type ASCIIRange is (ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val) Type Alias For \u00b6 ( ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val)","title":"type ASCIIRange"},{"location":"ponycheck-ASCIIRange/#asciirange","text":"[Source] type ASCIIRange is (ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val)","title":"ASCIIRange"},{"location":"ponycheck-ASCIIRange/#type-alias-for","text":"( ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val)","title":"Type Alias For"},{"location":"ponycheck-ASCIIWhiteSpace/","text":"ASCIIWhiteSpace \u00b6 [Source] primitive val ASCIIWhiteSpace Constructors \u00b6 create \u00b6 [Source] new val create() : ASCIIWhiteSpace val^ Returns \u00b6 ASCIIWhiteSpace val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ASCIIWhiteSpace val) : Bool val Parameters \u00b6 that: ASCIIWhiteSpace val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ASCIIWhiteSpace val) : Bool val Parameters \u00b6 that: ASCIIWhiteSpace val Returns \u00b6 Bool val","title":"primitive ASCIIWhiteSpace"},{"location":"ponycheck-ASCIIWhiteSpace/#asciiwhitespace","text":"[Source] primitive val ASCIIWhiteSpace","title":"ASCIIWhiteSpace"},{"location":"ponycheck-ASCIIWhiteSpace/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ASCIIWhiteSpace/#create","text":"[Source] new val create() : ASCIIWhiteSpace val^","title":"create"},{"location":"ponycheck-ASCIIWhiteSpace/#returns","text":"ASCIIWhiteSpace val^","title":"Returns"},{"location":"ponycheck-ASCIIWhiteSpace/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ASCIIWhiteSpace/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"ponycheck-ASCIIWhiteSpace/#returns_1","text":"String val","title":"Returns"},{"location":"ponycheck-ASCIIWhiteSpace/#eq","text":"[Source] fun box eq( that: ASCIIWhiteSpace val) : Bool val","title":"eq"},{"location":"ponycheck-ASCIIWhiteSpace/#parameters","text":"that: ASCIIWhiteSpace val","title":"Parameters"},{"location":"ponycheck-ASCIIWhiteSpace/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-ASCIIWhiteSpace/#ne","text":"[Source] fun box ne( that: ASCIIWhiteSpace val) : Bool val","title":"ne"},{"location":"ponycheck-ASCIIWhiteSpace/#parameters_1","text":"that: ASCIIWhiteSpace val","title":"Parameters"},{"location":"ponycheck-ASCIIWhiteSpace/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-CountdownIter/","text":"CountdownIter[optional T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [T] val)] \u00b6 [Source] workaround until 0.21.0 is released and Range supports negative steps from is exclusive, to is inclusive class ref CountdownIter[optional T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[T] val)] is Iterator[T] ref Implements \u00b6 Iterator [T] ref Constructors \u00b6 create \u00b6 [Source] new ref create( from: T, to: T = call) : CountdownIter[T] ref^ Parameters \u00b6 from: T to: T = call Returns \u00b6 CountdownIter [T] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : T Returns \u00b6 T","title":"class CountdownIter"},{"location":"ponycheck-CountdownIter/#countdowniteroptional-t-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integert-val","text":"[Source] workaround until 0.21.0 is released and Range supports negative steps from is exclusive, to is inclusive class ref CountdownIter[optional T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[T] val)] is Iterator[T] ref","title":"CountdownIter[optional T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[T] val)]"},{"location":"ponycheck-CountdownIter/#implements","text":"Iterator [T] ref","title":"Implements"},{"location":"ponycheck-CountdownIter/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-CountdownIter/#create","text":"[Source] new ref create( from: T, to: T = call) : CountdownIter[T] ref^","title":"create"},{"location":"ponycheck-CountdownIter/#parameters","text":"from: T to: T = call","title":"Parameters"},{"location":"ponycheck-CountdownIter/#returns","text":"CountdownIter [T] ref^","title":"Returns"},{"location":"ponycheck-CountdownIter/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-CountdownIter/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"ponycheck-CountdownIter/#returns_1","text":"Bool val","title":"Returns"},{"location":"ponycheck-CountdownIter/#next","text":"[Source] fun ref next() : T","title":"next"},{"location":"ponycheck-CountdownIter/#returns_2","text":"T","title":"Returns"},{"location":"ponycheck-ForAll/","text":"ForAll[T: T] \u00b6 [Source] class ref ForAll[T: T] Constructors \u00b6 create \u00b6 [Source] new ref create( gen': Generator[T] val, testHelper: TestHelper val) : ForAll[T] ref^ Parameters \u00b6 gen': Generator [T] val testHelper: TestHelper val Returns \u00b6 ForAll [T] ref^ Public Functions \u00b6 apply \u00b6 [Source] execute fun ref apply( prop: {(T, PropertyHelper) ?}[T] val) : None val ? Parameters \u00b6 prop: {(T, PropertyHelper) ?}[T] val Returns \u00b6 None val ?","title":"class ForAll"},{"location":"ponycheck-ForAll/#forallt-t","text":"[Source] class ref ForAll[T: T]","title":"ForAll[T: T]"},{"location":"ponycheck-ForAll/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ForAll/#create","text":"[Source] new ref create( gen': Generator[T] val, testHelper: TestHelper val) : ForAll[T] ref^","title":"create"},{"location":"ponycheck-ForAll/#parameters","text":"gen': Generator [T] val testHelper: TestHelper val","title":"Parameters"},{"location":"ponycheck-ForAll/#returns","text":"ForAll [T] ref^","title":"Returns"},{"location":"ponycheck-ForAll/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ForAll/#apply","text":"[Source] execute fun ref apply( prop: {(T, PropertyHelper) ?}[T] val) : None val ?","title":"apply"},{"location":"ponycheck-ForAll/#parameters_1","text":"prop: {(T, PropertyHelper) ?}[T] val","title":"Parameters"},{"location":"ponycheck-ForAll/#returns_1","text":"None val ?","title":"Returns"},{"location":"ponycheck-ForAll2/","text":"ForAll2[T1: T1, T2: T2] \u00b6 [Source] class ref ForAll2[T1: T1, T2: T2] Constructors \u00b6 create \u00b6 [Source] new ref create( gen1': Generator[T1] val, gen2': Generator[T2] val, h: TestHelper val) : ForAll2[T1, T2] ref^ Parameters \u00b6 gen1': Generator [T1] val gen2': Generator [T2] val h: TestHelper val Returns \u00b6 ForAll2 [T1, T2] ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( prop: {(T1, T2, PropertyHelper) ?}[T1, T2] val) : None val ? Parameters \u00b6 prop: {(T1, T2, PropertyHelper) ?}[T1, T2] val Returns \u00b6 None val ?","title":"class ForAll2"},{"location":"ponycheck-ForAll2/#forall2t1-t1-t2-t2","text":"[Source] class ref ForAll2[T1: T1, T2: T2]","title":"ForAll2[T1: T1, T2: T2]"},{"location":"ponycheck-ForAll2/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ForAll2/#create","text":"[Source] new ref create( gen1': Generator[T1] val, gen2': Generator[T2] val, h: TestHelper val) : ForAll2[T1, T2] ref^","title":"create"},{"location":"ponycheck-ForAll2/#parameters","text":"gen1': Generator [T1] val gen2': Generator [T2] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-ForAll2/#returns","text":"ForAll2 [T1, T2] ref^","title":"Returns"},{"location":"ponycheck-ForAll2/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ForAll2/#apply","text":"[Source] fun ref apply( prop: {(T1, T2, PropertyHelper) ?}[T1, T2] val) : None val ?","title":"apply"},{"location":"ponycheck-ForAll2/#parameters_1","text":"prop: {(T1, T2, PropertyHelper) ?}[T1, T2] val","title":"Parameters"},{"location":"ponycheck-ForAll2/#returns_1","text":"None val ?","title":"Returns"},{"location":"ponycheck-ForAll3/","text":"ForAll3[T1: T1, T2: T2, T3: T3] \u00b6 [Source] class ref ForAll3[T1: T1, T2: T2, T3: T3] Constructors \u00b6 create \u00b6 [Source] new ref create( gen1': Generator[T1] val, gen2': Generator[T2] val, gen3': Generator[T3] val, h: TestHelper val) : ForAll3[T1, T2, T3] ref^ Parameters \u00b6 gen1': Generator [T1] val gen2': Generator [T2] val gen3': Generator [T3] val h: TestHelper val Returns \u00b6 ForAll3 [T1, T2, T3] ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( prop: {(T1, T2, T3, PropertyHelper) ?}[T1, T2, T3] val) : None val ? Parameters \u00b6 prop: {(T1, T2, T3, PropertyHelper) ?}[T1, T2, T3] val Returns \u00b6 None val ?","title":"class ForAll3"},{"location":"ponycheck-ForAll3/#forall3t1-t1-t2-t2-t3-t3","text":"[Source] class ref ForAll3[T1: T1, T2: T2, T3: T3]","title":"ForAll3[T1: T1, T2: T2, T3: T3]"},{"location":"ponycheck-ForAll3/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ForAll3/#create","text":"[Source] new ref create( gen1': Generator[T1] val, gen2': Generator[T2] val, gen3': Generator[T3] val, h: TestHelper val) : ForAll3[T1, T2, T3] ref^","title":"create"},{"location":"ponycheck-ForAll3/#parameters","text":"gen1': Generator [T1] val gen2': Generator [T2] val gen3': Generator [T3] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-ForAll3/#returns","text":"ForAll3 [T1, T2, T3] ref^","title":"Returns"},{"location":"ponycheck-ForAll3/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ForAll3/#apply","text":"[Source] fun ref apply( prop: {(T1, T2, T3, PropertyHelper) ?}[T1, T2, T3] val) : None val ?","title":"apply"},{"location":"ponycheck-ForAll3/#parameters_1","text":"prop: {(T1, T2, T3, PropertyHelper) ?}[T1, T2, T3] val","title":"Parameters"},{"location":"ponycheck-ForAll3/#returns_1","text":"None val ?","title":"Returns"},{"location":"ponycheck-ForAll4/","text":"ForAll4[T1: T1, T2: T2, T3: T3, T4: T4] \u00b6 [Source] class ref ForAll4[T1: T1, T2: T2, T3: T3, T4: T4] Constructors \u00b6 create \u00b6 [Source] new ref create( gen1': Generator[T1] val, gen2': Generator[T2] val, gen3': Generator[T3] val, gen4': Generator[T4] val, h: TestHelper val) : ForAll4[T1, T2, T3, T4] ref^ Parameters \u00b6 gen1': Generator [T1] val gen2': Generator [T2] val gen3': Generator [T3] val gen4': Generator [T4] val h: TestHelper val Returns \u00b6 ForAll4 [T1, T2, T3, T4] ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( prop: {(T1, T2, T3, T4, PropertyHelper) ?}[T1, T2, T3, T4] val) : None val ? Parameters \u00b6 prop: {(T1, T2, T3, T4, PropertyHelper) ?}[T1, T2, T3, T4] val Returns \u00b6 None val ?","title":"class ForAll4"},{"location":"ponycheck-ForAll4/#forall4t1-t1-t2-t2-t3-t3-t4-t4","text":"[Source] class ref ForAll4[T1: T1, T2: T2, T3: T3, T4: T4]","title":"ForAll4[T1: T1, T2: T2, T3: T3, T4: T4]"},{"location":"ponycheck-ForAll4/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-ForAll4/#create","text":"[Source] new ref create( gen1': Generator[T1] val, gen2': Generator[T2] val, gen3': Generator[T3] val, gen4': Generator[T4] val, h: TestHelper val) : ForAll4[T1, T2, T3, T4] ref^","title":"create"},{"location":"ponycheck-ForAll4/#parameters","text":"gen1': Generator [T1] val gen2': Generator [T2] val gen3': Generator [T3] val gen4': Generator [T4] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-ForAll4/#returns","text":"ForAll4 [T1, T2, T3, T4] ref^","title":"Returns"},{"location":"ponycheck-ForAll4/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-ForAll4/#apply","text":"[Source] fun ref apply( prop: {(T1, T2, T3, T4, PropertyHelper) ?}[T1, T2, T3, T4] val) : None val ?","title":"apply"},{"location":"ponycheck-ForAll4/#parameters_1","text":"prop: {(T1, T2, T3, T4, PropertyHelper) ?}[T1, T2, T3, T4] val","title":"Parameters"},{"location":"ponycheck-ForAll4/#returns_1","text":"None val ?","title":"Returns"},{"location":"ponycheck-GenObj/","text":"GenObj[T: T] \u00b6 [Source] trait box GenObj[T: T] Public Functions \u00b6 generate \u00b6 [Source] fun box generate( rnd: Randomness ref) : (T^ | (T^ , Iterator[T^] ref)) ? Parameters \u00b6 rnd: Randomness ref Returns \u00b6 (T^ | (T^ , Iterator [T^] ref)) ? shrink \u00b6 [Source] fun box shrink( t: T) : (T^ , Iterator[T^] ref) Parameters \u00b6 t: T Returns \u00b6 (T^ , Iterator [T^] ref) generate_value \u00b6 [Source] simply generate a value and ignore any possible shrink values fun box generate_value( rnd: Randomness ref) : T^ ? Parameters \u00b6 rnd: Randomness ref Returns \u00b6 T^ ? generate_and_shrink \u00b6 [Source] generate a value and also return a shrink result even if the generator does not return any when calling generate . fun box generate_and_shrink( rnd: Randomness ref) : (T^ , Iterator[T^] ref) ? Parameters \u00b6 rnd: Randomness ref Returns \u00b6 (T^ , Iterator [T^] ref) ? iter \u00b6 [Source] fun box iter( rnd: Randomness ref) : Iterator[(T^ | (T^ , Iterator[T^] ref))] ref^ Parameters \u00b6 rnd: Randomness ref Returns \u00b6 Iterator [(T^ | (T^ , Iterator [T^] ref))] ref^ value_iter \u00b6 [Source] fun box value_iter( rnd: Randomness ref) : Iterator[T^] ref Parameters \u00b6 rnd: Randomness ref Returns \u00b6 Iterator [T^] ref value_and_shrink_iter \u00b6 [Source] fun box value_and_shrink_iter( rnd: Randomness ref) : Iterator[(T^ , Iterator[T^] ref)] ref Parameters \u00b6 rnd: Randomness ref Returns \u00b6 Iterator [(T^ , Iterator [T^] ref)] ref","title":"trait GenObj"},{"location":"ponycheck-GenObj/#genobjt-t","text":"[Source] trait box GenObj[T: T]","title":"GenObj[T: T]"},{"location":"ponycheck-GenObj/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-GenObj/#generate","text":"[Source] fun box generate( rnd: Randomness ref) : (T^ | (T^ , Iterator[T^] ref)) ?","title":"generate"},{"location":"ponycheck-GenObj/#parameters","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-GenObj/#returns","text":"(T^ | (T^ , Iterator [T^] ref)) ?","title":"Returns"},{"location":"ponycheck-GenObj/#shrink","text":"[Source] fun box shrink( t: T) : (T^ , Iterator[T^] ref)","title":"shrink"},{"location":"ponycheck-GenObj/#parameters_1","text":"t: T","title":"Parameters"},{"location":"ponycheck-GenObj/#returns_1","text":"(T^ , Iterator [T^] ref)","title":"Returns"},{"location":"ponycheck-GenObj/#generate_value","text":"[Source] simply generate a value and ignore any possible shrink values fun box generate_value( rnd: Randomness ref) : T^ ?","title":"generate_value"},{"location":"ponycheck-GenObj/#parameters_2","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-GenObj/#returns_2","text":"T^ ?","title":"Returns"},{"location":"ponycheck-GenObj/#generate_and_shrink","text":"[Source] generate a value and also return a shrink result even if the generator does not return any when calling generate . fun box generate_and_shrink( rnd: Randomness ref) : (T^ , Iterator[T^] ref) ?","title":"generate_and_shrink"},{"location":"ponycheck-GenObj/#parameters_3","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-GenObj/#returns_3","text":"(T^ , Iterator [T^] ref) ?","title":"Returns"},{"location":"ponycheck-GenObj/#iter","text":"[Source] fun box iter( rnd: Randomness ref) : Iterator[(T^ | (T^ , Iterator[T^] ref))] ref^","title":"iter"},{"location":"ponycheck-GenObj/#parameters_4","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-GenObj/#returns_4","text":"Iterator [(T^ | (T^ , Iterator [T^] ref))] ref^","title":"Returns"},{"location":"ponycheck-GenObj/#value_iter","text":"[Source] fun box value_iter( rnd: Randomness ref) : Iterator[T^] ref","title":"value_iter"},{"location":"ponycheck-GenObj/#parameters_5","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-GenObj/#returns_5","text":"Iterator [T^] ref","title":"Returns"},{"location":"ponycheck-GenObj/#value_and_shrink_iter","text":"[Source] fun box value_and_shrink_iter( rnd: Randomness ref) : Iterator[(T^ , Iterator[T^] ref)] ref","title":"value_and_shrink_iter"},{"location":"ponycheck-GenObj/#parameters_6","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-GenObj/#returns_6","text":"Iterator [(T^ , Iterator [T^] ref)] ref","title":"Returns"},{"location":"ponycheck-GenerateResult/","text":"GenerateResult[T2: T2] \u00b6 [Source] Return type for Generator.generate . Either a single value only or a Tuple of a value and an Iterator of shrunken values based upon this value. type GenerateResult[T2: T2] is (T2^ | (T2^ , Iterator[T2^] ref)) Type Alias For \u00b6 (T2^ | (T2^ , Iterator [T2^] ref))","title":"type GenerateResult"},{"location":"ponycheck-GenerateResult/#generateresultt2-t2","text":"[Source] Return type for Generator.generate . Either a single value only or a Tuple of a value and an Iterator of shrunken values based upon this value. type GenerateResult[T2: T2] is (T2^ | (T2^ , Iterator[T2^] ref))","title":"GenerateResult[T2: T2]"},{"location":"ponycheck-GenerateResult/#type-alias-for","text":"(T2^ | (T2^ , Iterator [T2^] ref))","title":"Type Alias For"},{"location":"ponycheck-Generator/","text":"Generator[T: T] \u00b6 [Source] A Generator is capable of generating random values of a certain type T given a source of Randomness and knows how to shrink or simplify values of that type. When testing a property against one or more given Generators those generators' generate methods are being called many times to generate sample values that are then used to validate the property. When a failing sample is found, the ponycheck engine is trying to find a smaller or more simple sample by shrinking it. If the generator did not provide any shrinked samples as a result of generate , its shrink method is called to obtain simpler results. Ponycheck obtains more shrunken samples until the property is not failing anymore. The last failing sample, which is considered the most simple one, is then reported to the user. class box Generator[T: T] is GenObj[T] box Implements \u00b6 GenObj [T] box Constructors \u00b6 create \u00b6 [Source] new ref create( gen: GenObj[T] box) : Generator[T] ref^ Parameters \u00b6 gen: GenObj [T] box Returns \u00b6 Generator [T] ref^ Public Functions \u00b6 generate \u00b6 [Source] Let this generator generate a value given a source of Randomness . Also allow for returning a value and pre-generated shrink results as a ValueAndShrink[T] instance, a tuple of (T^, Seq[T]) . This helps propagating shrink results through all kinds of Generator combinators like filter , map and flatMap . If implementing a custom Generator based on another one, a Generator Combinator, you should use shrunken values returned by generate to also return shrunken values based on them If generating an example value is costly, it might be more efficient to simply return the generated value and only shrink in big steps or do no shrinking at all. If generating values is lightweight, shrunken values should also be returned. fun box generate( rnd: Randomness ref) : (T^ | (T^ , Iterator[T^] ref)) ? Parameters \u00b6 rnd: Randomness ref Returns \u00b6 (T^ | (T^ , Iterator [T^] ref)) ? shrink \u00b6 [Source] Simplify the given value. As the returned value can also be iso , it needs to be consumed and returned It is preffered to already return a ValueAndShrink from generate . fun box shrink( t: T) : (T^ , Iterator[T^] ref) Parameters \u00b6 t: T Returns \u00b6 (T^ , Iterator [T^] ref) generate_value \u00b6 [Source] fun box generate_value( rnd: Randomness ref) : T^ ? Parameters \u00b6 rnd: Randomness ref Returns \u00b6 T^ ? generate_and_shrink \u00b6 [Source] fun box generate_and_shrink( rnd: Randomness ref) : (T^ , Iterator[T^] ref) ? Parameters \u00b6 rnd: Randomness ref Returns \u00b6 (T^ , Iterator [T^] ref) ? filter \u00b6 [Source] apply predicate to the values generated by this Generator and only values for which predicate returns true . Example: let even_i32s = Generators.i32() .filter( {(t) => (t, ((t % 2) == 0)) }) fun box filter( predicate: {(T): (T^, Bool)}[T] box) : Generator[T] box Parameters \u00b6 predicate: {(T): (T^, Bool)}[T] box Returns \u00b6 Generator [T] box map[U: U] \u00b6 [Source] apply function fn to each value of this iterator and yield the results. Example: let single_code_point_string_gen = Generators.u32() .map[String]({(u) => String.from_utf32(u) }) fun box map[U: U]( fn: {(T): U^}[T, U] box) : Generator[U] box Parameters \u00b6 fn: {(T): U^}[T, U] box Returns \u00b6 Generator [U] box flat_map[U: U] \u00b6 [Source] For each value of this generator create a generator that is then combined. fun box flat_map[U: U]( fn: {(T): Generator[U]}[T, U] box) : Generator[U] box Parameters \u00b6 fn: {(T): Generator[U]}[T, U] box Returns \u00b6 Generator [U] box union[U: U] \u00b6 [Source] Create a generator that produces the value of this generator or the other with the same probability, returning a union type of this generator and the other one. fun box union[U: U]( other: Generator[U] box) : Generator[(T | U)] box Parameters \u00b6 other: Generator [U] box Returns \u00b6 Generator [(T | U)] box iter \u00b6 [Source] fun box iter( rnd: Randomness ref) : Iterator[(T^ | (T^ , Iterator[T^] ref))] ref^ Parameters \u00b6 rnd: Randomness ref Returns \u00b6 Iterator [(T^ | (T^ , Iterator [T^] ref))] ref^ value_iter \u00b6 [Source] fun box value_iter( rnd: Randomness ref) : Iterator[T^] ref Parameters \u00b6 rnd: Randomness ref Returns \u00b6 Iterator [T^] ref value_and_shrink_iter \u00b6 [Source] fun box value_and_shrink_iter( rnd: Randomness ref) : Iterator[(T^ , Iterator[T^] ref)] ref Parameters \u00b6 rnd: Randomness ref Returns \u00b6 Iterator [(T^ , Iterator [T^] ref)] ref","title":"class Generator"},{"location":"ponycheck-Generator/#generatort-t","text":"[Source] A Generator is capable of generating random values of a certain type T given a source of Randomness and knows how to shrink or simplify values of that type. When testing a property against one or more given Generators those generators' generate methods are being called many times to generate sample values that are then used to validate the property. When a failing sample is found, the ponycheck engine is trying to find a smaller or more simple sample by shrinking it. If the generator did not provide any shrinked samples as a result of generate , its shrink method is called to obtain simpler results. Ponycheck obtains more shrunken samples until the property is not failing anymore. The last failing sample, which is considered the most simple one, is then reported to the user. class box Generator[T: T] is GenObj[T] box","title":"Generator[T: T]"},{"location":"ponycheck-Generator/#implements","text":"GenObj [T] box","title":"Implements"},{"location":"ponycheck-Generator/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-Generator/#create","text":"[Source] new ref create( gen: GenObj[T] box) : Generator[T] ref^","title":"create"},{"location":"ponycheck-Generator/#parameters","text":"gen: GenObj [T] box","title":"Parameters"},{"location":"ponycheck-Generator/#returns","text":"Generator [T] ref^","title":"Returns"},{"location":"ponycheck-Generator/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Generator/#generate","text":"[Source] Let this generator generate a value given a source of Randomness . Also allow for returning a value and pre-generated shrink results as a ValueAndShrink[T] instance, a tuple of (T^, Seq[T]) . This helps propagating shrink results through all kinds of Generator combinators like filter , map and flatMap . If implementing a custom Generator based on another one, a Generator Combinator, you should use shrunken values returned by generate to also return shrunken values based on them If generating an example value is costly, it might be more efficient to simply return the generated value and only shrink in big steps or do no shrinking at all. If generating values is lightweight, shrunken values should also be returned. fun box generate( rnd: Randomness ref) : (T^ | (T^ , Iterator[T^] ref)) ?","title":"generate"},{"location":"ponycheck-Generator/#parameters_1","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-Generator/#returns_1","text":"(T^ | (T^ , Iterator [T^] ref)) ?","title":"Returns"},{"location":"ponycheck-Generator/#shrink","text":"[Source] Simplify the given value. As the returned value can also be iso , it needs to be consumed and returned It is preffered to already return a ValueAndShrink from generate . fun box shrink( t: T) : (T^ , Iterator[T^] ref)","title":"shrink"},{"location":"ponycheck-Generator/#parameters_2","text":"t: T","title":"Parameters"},{"location":"ponycheck-Generator/#returns_2","text":"(T^ , Iterator [T^] ref)","title":"Returns"},{"location":"ponycheck-Generator/#generate_value","text":"[Source] fun box generate_value( rnd: Randomness ref) : T^ ?","title":"generate_value"},{"location":"ponycheck-Generator/#parameters_3","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-Generator/#returns_3","text":"T^ ?","title":"Returns"},{"location":"ponycheck-Generator/#generate_and_shrink","text":"[Source] fun box generate_and_shrink( rnd: Randomness ref) : (T^ , Iterator[T^] ref) ?","title":"generate_and_shrink"},{"location":"ponycheck-Generator/#parameters_4","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-Generator/#returns_4","text":"(T^ , Iterator [T^] ref) ?","title":"Returns"},{"location":"ponycheck-Generator/#filter","text":"[Source] apply predicate to the values generated by this Generator and only values for which predicate returns true . Example: let even_i32s = Generators.i32() .filter( {(t) => (t, ((t % 2) == 0)) }) fun box filter( predicate: {(T): (T^, Bool)}[T] box) : Generator[T] box","title":"filter"},{"location":"ponycheck-Generator/#parameters_5","text":"predicate: {(T): (T^, Bool)}[T] box","title":"Parameters"},{"location":"ponycheck-Generator/#returns_5","text":"Generator [T] box","title":"Returns"},{"location":"ponycheck-Generator/#mapu-u","text":"[Source] apply function fn to each value of this iterator and yield the results. Example: let single_code_point_string_gen = Generators.u32() .map[String]({(u) => String.from_utf32(u) }) fun box map[U: U]( fn: {(T): U^}[T, U] box) : Generator[U] box","title":"map[U: U]"},{"location":"ponycheck-Generator/#parameters_6","text":"fn: {(T): U^}[T, U] box","title":"Parameters"},{"location":"ponycheck-Generator/#returns_6","text":"Generator [U] box","title":"Returns"},{"location":"ponycheck-Generator/#flat_mapu-u","text":"[Source] For each value of this generator create a generator that is then combined. fun box flat_map[U: U]( fn: {(T): Generator[U]}[T, U] box) : Generator[U] box","title":"flat_map[U: U]"},{"location":"ponycheck-Generator/#parameters_7","text":"fn: {(T): Generator[U]}[T, U] box","title":"Parameters"},{"location":"ponycheck-Generator/#returns_7","text":"Generator [U] box","title":"Returns"},{"location":"ponycheck-Generator/#unionu-u","text":"[Source] Create a generator that produces the value of this generator or the other with the same probability, returning a union type of this generator and the other one. fun box union[U: U]( other: Generator[U] box) : Generator[(T | U)] box","title":"union[U: U]"},{"location":"ponycheck-Generator/#parameters_8","text":"other: Generator [U] box","title":"Parameters"},{"location":"ponycheck-Generator/#returns_8","text":"Generator [(T | U)] box","title":"Returns"},{"location":"ponycheck-Generator/#iter","text":"[Source] fun box iter( rnd: Randomness ref) : Iterator[(T^ | (T^ , Iterator[T^] ref))] ref^","title":"iter"},{"location":"ponycheck-Generator/#parameters_9","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-Generator/#returns_9","text":"Iterator [(T^ | (T^ , Iterator [T^] ref))] ref^","title":"Returns"},{"location":"ponycheck-Generator/#value_iter","text":"[Source] fun box value_iter( rnd: Randomness ref) : Iterator[T^] ref","title":"value_iter"},{"location":"ponycheck-Generator/#parameters_10","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-Generator/#returns_10","text":"Iterator [T^] ref","title":"Returns"},{"location":"ponycheck-Generator/#value_and_shrink_iter","text":"[Source] fun box value_and_shrink_iter( rnd: Randomness ref) : Iterator[(T^ , Iterator[T^] ref)] ref","title":"value_and_shrink_iter"},{"location":"ponycheck-Generator/#parameters_11","text":"rnd: Randomness ref","title":"Parameters"},{"location":"ponycheck-Generator/#returns_11","text":"Iterator [(T^ , Iterator [T^] ref)] ref","title":"Returns"},{"location":"ponycheck-Generators/","text":"Generators \u00b6 [Source] Convenience combinators and factories for common types and kind of Generators. primitive val Generators Constructors \u00b6 create \u00b6 [Source] new val create() : Generators val^ Returns \u00b6 Generators val^ Public Functions \u00b6 unit[T: T] \u00b6 [Source] Generate a reference to the same value over and over again. This reference will be of type box->T and not just T as this generator will need to keep a reference to the given value. fun box unit[T: T]( t: T, do_shrink: Bool val = false) : Generator[box->T] box Parameters \u00b6 t: T do_shrink: Bool val = false Returns \u00b6 Generator [box->T] box none[T: None val] \u00b6 [Source] fun box none[T: None val]() : Generator[(T | None val)] box Returns \u00b6 Generator [(T | None val)] box repeatedly[T: T] \u00b6 [Source] Generate values by calling the lambda f repeatedly, once for every invocation of generate . f needs to return an ephemeral type T^ , that means in most cases it needs to consume its returned value. Otherwise we would end up with an alias for T which is T! . (e.g. String iso would be returned as String iso! which is a String tag ). Example: Generators.repeatedly[Writer]({(): Writer^ => let writer = Writer.>write(\"consume me, please\") consume writer }) fun box repeatedly[T: T]( f: {(): T^ ?}[T] box) : Generator[T] box Parameters \u00b6 f: {(): T^ ?}[T] box Returns \u00b6 Generator [T] box seq_of[T: T, S: Seq [T] ref] \u00b6 [Source] Create a Seq from the values of the given Generator with an optional minimum and maximum size, defaults are 0 and 100 respectively. fun box seq_of[T: T, S: Seq[T] ref]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[S] box Parameters \u00b6 gen: Generator [T] box min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [S] box iso_seq_of[T: Any #send, S: Seq [T] iso] \u00b6 [Source] Generate a Seq[T] where T must be sendable (have a reference capability of tag , val or iso ). The constraint of the elements being sendable stems from the fact that there is no other way to populate the iso seq if the elements might be non-sendable (i.e. ref), as then the seq would leak references via its elements. fun box iso_seq_of[T: Any #send, S: Seq[T] iso]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[S] box Parameters \u00b6 gen: Generator [T] box min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [S] box array_of[T: T] \u00b6 [Source] fun box array_of[T: T]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[Array[T] ref] box Parameters \u00b6 gen: Generator [T] box min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ Array [T] ref] box shuffled_array_gen[T: T] \u00b6 [Source] fun box shuffled_array_gen[T: T]( gen: Generator[Array[T] ref] box) : Generator[Array[T] ref] box Parameters \u00b6 gen: Generator [ Array [T] ref] box Returns \u00b6 Generator [ Array [T] ref] box shuffled_iter[T: T] \u00b6 [Source] fun box shuffled_iter[T: T]( array: Array[T] ref) : Generator[Iterator[this->T!] ref] box Parameters \u00b6 array: Array [T] ref Returns \u00b6 Generator [ Iterator [this->T!] ref] box list_of[T: T] \u00b6 [Source] fun box list_of[T: T]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[List[T] ref] box Parameters \u00b6 gen: Generator [T] box min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ List [T] ref] box set_of[T: ( Hashable #read & Equatable [T] #read)] \u00b6 [Source] Create a generator for Set filled with values of the given generator gen . The returned sets will have a size up to max but tend to have fewer than max depending on the source generator gen . E.g. if the given generator is for U8 values and max is set to 1024 the set will only ever be of size 256 max. Also for efficiency purposes and to not loop forever this generator will only try to add at most max values to the set. If there are duplicates, the set won't grow. fun box set_of[T: (Hashable #read & Equatable[T] #read)]( gen: Generator[T] box, max: USize val = 100) : Generator[HashSet[T, HashEq[T] val] ref] box Parameters \u00b6 gen: Generator [T] box max: USize val = 100 Returns \u00b6 Generator [ HashSet [T, HashEq [T] val] ref] box set_is_of[T: T] \u00b6 [Source] Create a generator for SetIs filled with values of the given generator gen . The returned SetIs will have a size up to max but tend to have fewer entries depending on the source generator gen . E.g. if the given generator is for U8 values and max is set to 1024 the set will only ever be of size 256 max. Also for efficiency purposes and to not loop forever this generator will only try to add at most max values to the set. If there are duplicates, the set won't grow. fun box set_is_of[T: T]( gen: Generator[T] box, max: USize val = 100) : Generator[HashSet[T, HashIs[T!] val] ref] box Parameters \u00b6 gen: Generator [T] box max: USize val = 100 Returns \u00b6 Generator [ HashSet [T, HashIs [T!] val] ref] box map_of[K: ( Hashable #read & Equatable [K] #read), V: V] \u00b6 [Source] Create a generator for Map from a generator of key-value tuples. The generated maps will have a size up to max but tend to have fewer entries depending on the source generator gen . If the generator generates key-value pairs with duplicate keys (based on structural equality) the pair that is generated later will overwrite earlier entries in the map. fun box map_of[K: (Hashable #read & Equatable[K] #read), V: V]( gen: Generator[(K , V)] box, max: USize val = 100) : Generator[HashMap[K, V, HashEq[K] val] ref] box Parameters \u00b6 gen: Generator [(K , V)] box max: USize val = 100 Returns \u00b6 Generator [ HashMap [K, V, HashEq [K] val] ref] box map_is_of[K: K, V: V] \u00b6 [Source] Create a generator for MapIs from a generator of key-value tuples. The generated maps will have a size up to max but tend to have fewer entries depending on the source generator gen . If the generator generates key-value pairs with duplicate keys (based on identity) the pair that is generated later will overwrite earlier entries in the map. fun box map_is_of[K: K, V: V]( gen: Generator[(K , V)] box, max: USize val = 100) : Generator[HashMap[K, V, HashIs[K] val] ref] box Parameters \u00b6 gen: Generator [(K , V)] box max: USize val = 100 Returns \u00b6 Generator [ HashMap [K, V, HashIs [K] val] ref] box one_of[T: T] \u00b6 [Source] Generate a random value from the given ReadSeq. This generator will generate nothing if the given xs is empty. Generators created with this method do not support shrinking. If do_shrink is set to true , it will return the same value for each shrink round. Otherwise it will return nothing. fun box one_of[T: T]( xs: ReadSeq[T] box, do_shrink: Bool val = false) : Generator[box->T] box Parameters \u00b6 xs: ReadSeq [T] box do_shrink: Bool val = false Returns \u00b6 Generator [box->T] box one_of_safe[T: T] \u00b6 [Source] Version of one_of that will error if xs is empty. fun box one_of_safe[T: T]( xs: ReadSeq[T] box, do_shrink: Bool val = false) : Generator[box->T] box ? Parameters \u00b6 xs: ReadSeq [T] box do_shrink: Bool val = false Returns \u00b6 Generator [box->T] box ? frequency[T: T] \u00b6 [Source] chose a value of one of the given Generators, while controlling the distribution with the associated weights. The weights are of type USize and control how likely a value is chosen. The likelihood of a value v to be chosen is weight_v / weights_sum . If all weighted_generators have equal size the distribution will be uniform. Example of a generator to output odd U8 values twice as likely as even ones: Generators.frequency[U8]([ (1, Generators.u8().filter({(u) => (u, (u % 2) == 0 })) (2, Generators.u8().filter({(u) => (u, (u % 2) != 0 })) ]) fun box frequency[T: T]( weighted_generators: ReadSeq[(USize val , Generator[T] box)] box) : Generator[T] box Parameters \u00b6 weighted_generators: ReadSeq [( USize val , Generator [T] box)] box Returns \u00b6 Generator [T] box frequency_safe[T: T] \u00b6 [Source] Version of frequency that errors if the given weighted_generators is empty. fun box frequency_safe[T: T]( weighted_generators: ReadSeq[(USize val , Generator[T] box)] box) : Generator[T] box ? Parameters \u00b6 weighted_generators: ReadSeq [( USize val , Generator [T] box)] box Returns \u00b6 Generator [T] box ? zip2[T1: T1, T2: T2] \u00b6 [Source] zip two generators into a generator of a 2-tuple containing the values generated by both generators. fun box zip2[T1: T1, T2: T2]( gen1: Generator[T1] box, gen2: Generator[T2] box) : Generator[(T1 , T2)] box Parameters \u00b6 gen1: Generator [T1] box gen2: Generator [T2] box Returns \u00b6 Generator [(T1 , T2)] box zip3[T1: T1, T2: T2, T3: T3] \u00b6 [Source] zip three generators into a generator of a 3-tuple containing the values generated by those three generators. fun box zip3[T1: T1, T2: T2, T3: T3]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box) : Generator[(T1 , T2 , T3)] box Parameters \u00b6 gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box Returns \u00b6 Generator [(T1 , T2 , T3)] box zip4[T1: T1, T2: T2, T3: T3, T4: T4] \u00b6 [Source] zip four generators into a generator of a 4-tuple containing the values generated by those four generators. fun box zip4[T1: T1, T2: T2, T3: T3, T4: T4]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box, gen4: Generator[T4] box) : Generator[(T1 , T2 , T3 , T4)] box Parameters \u00b6 gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box gen4: Generator [T4] box Returns \u00b6 Generator [(T1 , T2 , T3 , T4)] box map2[T1: T1, T2: T2, T3: T3] \u00b6 [Source] convenience combinator for mapping 2 generators into 1 fun box map2[T1: T1, T2: T2, T3: T3]( gen1: Generator[T1] box, gen2: Generator[T2] box, fn: {(T1, T2): T3^}[T1, T2, T3] ref) : Generator[T3] box Parameters \u00b6 gen1: Generator [T1] box gen2: Generator [T2] box fn: {(T1, T2): T3^}[T1, T2, T3] ref Returns \u00b6 Generator [T3] box map3[T1: T1, T2: T2, T3: T3, T4: T4] \u00b6 [Source] convenience combinator for mapping 3 generators into 1 fun box map3[T1: T1, T2: T2, T3: T3, T4: T4]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box, fn: {(T1, T2, T3): T4^}[T1, T2, T3, T4] ref) : Generator[T4] box Parameters \u00b6 gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box fn: {(T1, T2, T3): T4^}[T1, T2, T3, T4] ref Returns \u00b6 Generator [T4] box map4[T1: T1, T2: T2, T3: T3, T4: T4, T5: T5] \u00b6 [Source] convenience combinator for mapping 4 generators into 1 fun box map4[T1: T1, T2: T2, T3: T3, T4: T4, T5: T5]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box, gen4: Generator[T4] box, fn: {(T1, T2, T3, T4): T5^}[T1, T2, T3, T4, T5] ref) : Generator[T5] box Parameters \u00b6 gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box gen4: Generator [T4] box fn: {(T1, T2, T3, T4): T5^}[T1, T2, T3, T4, T5] ref Returns \u00b6 Generator [T5] box bool \u00b6 [Source] create a generator of bool values. fun box bool() : Generator[Bool val] box Returns \u00b6 Generator [ Bool val] box u8 \u00b6 [Source] create a generator for U8 values fun box u8( min: U8 val = call, max: U8 val = call) : Generator[U8 val] box Parameters \u00b6 min: U8 val = call max: U8 val = call Returns \u00b6 Generator [ U8 val] box u16 \u00b6 [Source] create a generator for U16 values fun box u16( min: U16 val = call, max: U16 val = call) : Generator[U16 val] box Parameters \u00b6 min: U16 val = call max: U16 val = call Returns \u00b6 Generator [ U16 val] box u32 \u00b6 [Source] create a generator for U32 values fun box u32( min: U32 val = call, max: U32 val = call) : Generator[U32 val] box Parameters \u00b6 min: U32 val = call max: U32 val = call Returns \u00b6 Generator [ U32 val] box u64 \u00b6 [Source] create a generator for U64 values fun box u64( min: U64 val = call, max: U64 val = call) : Generator[U64 val] box Parameters \u00b6 min: U64 val = call max: U64 val = call Returns \u00b6 Generator [ U64 val] box u128 \u00b6 [Source] create a generator for U128 values fun box u128( min: U128 val = call, max: U128 val = call) : Generator[U128 val] box Parameters \u00b6 min: U128 val = call max: U128 val = call Returns \u00b6 Generator [ U128 val] box usize \u00b6 [Source] create a generator for USize values fun box usize( min: USize val = call, max: USize val = call) : Generator[USize val] box Parameters \u00b6 min: USize val = call max: USize val = call Returns \u00b6 Generator [ USize val] box ulong \u00b6 [Source] create a generator for ULong values fun box ulong( min: ULong val = call, max: ULong val = call) : Generator[ULong val] box Parameters \u00b6 min: ULong val = call max: ULong val = call Returns \u00b6 Generator [ ULong val] box i8 \u00b6 [Source] create a generator for I8 values fun box i8( min: I8 val = call, max: I8 val = call) : Generator[I8 val] box Parameters \u00b6 min: I8 val = call max: I8 val = call Returns \u00b6 Generator [ I8 val] box i16 \u00b6 [Source] create a generator for I16 values fun box i16( min: I16 val = call, max: I16 val = call) : Generator[I16 val] box Parameters \u00b6 min: I16 val = call max: I16 val = call Returns \u00b6 Generator [ I16 val] box i32 \u00b6 [Source] create a generator for I32 values fun box i32( min: I32 val = call, max: I32 val = call) : Generator[I32 val] box Parameters \u00b6 min: I32 val = call max: I32 val = call Returns \u00b6 Generator [ I32 val] box i64 \u00b6 [Source] create a generator for I64 values fun box i64( min: I64 val = call, max: I64 val = call) : Generator[I64 val] box Parameters \u00b6 min: I64 val = call max: I64 val = call Returns \u00b6 Generator [ I64 val] box i128 \u00b6 [Source] create a generator for I128 values fun box i128( min: I128 val = call, max: I128 val = call) : Generator[I128 val] box Parameters \u00b6 min: I128 val = call max: I128 val = call Returns \u00b6 Generator [ I128 val] box ilong \u00b6 [Source] create a generator for ILong values fun box ilong( min: ILong val = call, max: ILong val = call) : Generator[ILong val] box Parameters \u00b6 min: ILong val = call max: ILong val = call Returns \u00b6 Generator [ ILong val] box isize \u00b6 [Source] create a generator for ISize values fun box isize( min: ISize val = call, max: ISize val = call) : Generator[ISize val] box Parameters \u00b6 min: ISize val = call max: ISize val = call Returns \u00b6 Generator [ ISize val] box byte_string \u00b6 [Source] create a generator for strings generated from the bytes returned by the generator gen with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box byte_string( gen: Generator[U8 val] box, min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 gen: Generator [ U8 val] box min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box ascii \u00b6 [Source] create a generator for strings withing the given range with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii( min: USize val = 0, max: USize val = 100, range: (ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val) = reference) : Generator[String val] box Parameters \u00b6 min: USize val = 0 max: USize val = 100 range: ( ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val) = reference Returns \u00b6 Generator [ String val] box ascii_printable \u00b6 [Source] create a generator for strings of printable ascii characters with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii_printable( min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box ascii_numeric \u00b6 [Source] create a generator for strings of numeric ascii characters with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii_numeric( min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box ascii_letters \u00b6 [Source] create a generator for strings of ascii letters with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii_letters( min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box utf32_codepoint_string \u00b6 [Source] create a generator for strings from a generator of unicode codepoints with a minimum length of min codepoints (default: 0) and a maximum length of max codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. fun box utf32_codepoint_string( gen: Generator[U32 val] box, min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 gen: Generator [ U32 val] box min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box unicode \u00b6 [Source] create a generator for unicode strings with a minimum length of min codepoints (default: 0) and a maximum length of max codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. fun box unicode( min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box unicode_bmp \u00b6 [Source] create a generator for unicode strings from the basic multilingual plane only with a minimum length of min codepoints (default: 0) and a maximum length of max codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. fun box unicode_bmp( min: USize val = 0, max: USize val = 100) : Generator[String val] box Parameters \u00b6 min: USize val = 0 max: USize val = 100 Returns \u00b6 Generator [ String val] box eq \u00b6 [Source] fun box eq( that: Generators val) : Bool val Parameters \u00b6 that: Generators val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Generators val) : Bool val Parameters \u00b6 that: Generators val Returns \u00b6 Bool val","title":"primitive Generators"},{"location":"ponycheck-Generators/#generators","text":"[Source] Convenience combinators and factories for common types and kind of Generators. primitive val Generators","title":"Generators"},{"location":"ponycheck-Generators/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-Generators/#create","text":"[Source] new val create() : Generators val^","title":"create"},{"location":"ponycheck-Generators/#returns","text":"Generators val^","title":"Returns"},{"location":"ponycheck-Generators/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Generators/#unitt-t","text":"[Source] Generate a reference to the same value over and over again. This reference will be of type box->T and not just T as this generator will need to keep a reference to the given value. fun box unit[T: T]( t: T, do_shrink: Bool val = false) : Generator[box->T] box","title":"unit[T: T]"},{"location":"ponycheck-Generators/#parameters","text":"t: T do_shrink: Bool val = false","title":"Parameters"},{"location":"ponycheck-Generators/#returns_1","text":"Generator [box->T] box","title":"Returns"},{"location":"ponycheck-Generators/#nonet-none-val","text":"[Source] fun box none[T: None val]() : Generator[(T | None val)] box","title":"none[T: None val]"},{"location":"ponycheck-Generators/#returns_2","text":"Generator [(T | None val)] box","title":"Returns"},{"location":"ponycheck-Generators/#repeatedlyt-t","text":"[Source] Generate values by calling the lambda f repeatedly, once for every invocation of generate . f needs to return an ephemeral type T^ , that means in most cases it needs to consume its returned value. Otherwise we would end up with an alias for T which is T! . (e.g. String iso would be returned as String iso! which is a String tag ). Example: Generators.repeatedly[Writer]({(): Writer^ => let writer = Writer.>write(\"consume me, please\") consume writer }) fun box repeatedly[T: T]( f: {(): T^ ?}[T] box) : Generator[T] box","title":"repeatedly[T: T]"},{"location":"ponycheck-Generators/#parameters_1","text":"f: {(): T^ ?}[T] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_3","text":"Generator [T] box","title":"Returns"},{"location":"ponycheck-Generators/#seq_oft-t-s-seqt-ref","text":"[Source] Create a Seq from the values of the given Generator with an optional minimum and maximum size, defaults are 0 and 100 respectively. fun box seq_of[T: T, S: Seq[T] ref]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[S] box","title":"seq_of[T: T, S: Seq[T] ref]"},{"location":"ponycheck-Generators/#parameters_2","text":"gen: Generator [T] box min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_4","text":"Generator [S] box","title":"Returns"},{"location":"ponycheck-Generators/#iso_seq_oft-any-send-s-seqt-iso","text":"[Source] Generate a Seq[T] where T must be sendable (have a reference capability of tag , val or iso ). The constraint of the elements being sendable stems from the fact that there is no other way to populate the iso seq if the elements might be non-sendable (i.e. ref), as then the seq would leak references via its elements. fun box iso_seq_of[T: Any #send, S: Seq[T] iso]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[S] box","title":"iso_seq_of[T: Any #send, S: Seq[T] iso]"},{"location":"ponycheck-Generators/#parameters_3","text":"gen: Generator [T] box min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_5","text":"Generator [S] box","title":"Returns"},{"location":"ponycheck-Generators/#array_oft-t","text":"[Source] fun box array_of[T: T]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[Array[T] ref] box","title":"array_of[T: T]"},{"location":"ponycheck-Generators/#parameters_4","text":"gen: Generator [T] box min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_6","text":"Generator [ Array [T] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#shuffled_array_gent-t","text":"[Source] fun box shuffled_array_gen[T: T]( gen: Generator[Array[T] ref] box) : Generator[Array[T] ref] box","title":"shuffled_array_gen[T: T]"},{"location":"ponycheck-Generators/#parameters_5","text":"gen: Generator [ Array [T] ref] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_7","text":"Generator [ Array [T] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#shuffled_itert-t","text":"[Source] fun box shuffled_iter[T: T]( array: Array[T] ref) : Generator[Iterator[this->T!] ref] box","title":"shuffled_iter[T: T]"},{"location":"ponycheck-Generators/#parameters_6","text":"array: Array [T] ref","title":"Parameters"},{"location":"ponycheck-Generators/#returns_8","text":"Generator [ Iterator [this->T!] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#list_oft-t","text":"[Source] fun box list_of[T: T]( gen: Generator[T] box, min: USize val = 0, max: USize val = 100) : Generator[List[T] ref] box","title":"list_of[T: T]"},{"location":"ponycheck-Generators/#parameters_7","text":"gen: Generator [T] box min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_9","text":"Generator [ List [T] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#set_oft-hashable-read-equatablet-read","text":"[Source] Create a generator for Set filled with values of the given generator gen . The returned sets will have a size up to max but tend to have fewer than max depending on the source generator gen . E.g. if the given generator is for U8 values and max is set to 1024 the set will only ever be of size 256 max. Also for efficiency purposes and to not loop forever this generator will only try to add at most max values to the set. If there are duplicates, the set won't grow. fun box set_of[T: (Hashable #read & Equatable[T] #read)]( gen: Generator[T] box, max: USize val = 100) : Generator[HashSet[T, HashEq[T] val] ref] box","title":"set_of[T: (Hashable #read &amp; Equatable[T] #read)]"},{"location":"ponycheck-Generators/#parameters_8","text":"gen: Generator [T] box max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_10","text":"Generator [ HashSet [T, HashEq [T] val] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#set_is_oft-t","text":"[Source] Create a generator for SetIs filled with values of the given generator gen . The returned SetIs will have a size up to max but tend to have fewer entries depending on the source generator gen . E.g. if the given generator is for U8 values and max is set to 1024 the set will only ever be of size 256 max. Also for efficiency purposes and to not loop forever this generator will only try to add at most max values to the set. If there are duplicates, the set won't grow. fun box set_is_of[T: T]( gen: Generator[T] box, max: USize val = 100) : Generator[HashSet[T, HashIs[T!] val] ref] box","title":"set_is_of[T: T]"},{"location":"ponycheck-Generators/#parameters_9","text":"gen: Generator [T] box max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_11","text":"Generator [ HashSet [T, HashIs [T!] val] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#map_ofk-hashable-read-equatablek-read-v-v","text":"[Source] Create a generator for Map from a generator of key-value tuples. The generated maps will have a size up to max but tend to have fewer entries depending on the source generator gen . If the generator generates key-value pairs with duplicate keys (based on structural equality) the pair that is generated later will overwrite earlier entries in the map. fun box map_of[K: (Hashable #read & Equatable[K] #read), V: V]( gen: Generator[(K , V)] box, max: USize val = 100) : Generator[HashMap[K, V, HashEq[K] val] ref] box","title":"map_of[K: (Hashable #read &amp; Equatable[K] #read), V: V]"},{"location":"ponycheck-Generators/#parameters_10","text":"gen: Generator [(K , V)] box max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_12","text":"Generator [ HashMap [K, V, HashEq [K] val] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#map_is_ofk-k-v-v","text":"[Source] Create a generator for MapIs from a generator of key-value tuples. The generated maps will have a size up to max but tend to have fewer entries depending on the source generator gen . If the generator generates key-value pairs with duplicate keys (based on identity) the pair that is generated later will overwrite earlier entries in the map. fun box map_is_of[K: K, V: V]( gen: Generator[(K , V)] box, max: USize val = 100) : Generator[HashMap[K, V, HashIs[K] val] ref] box","title":"map_is_of[K: K, V: V]"},{"location":"ponycheck-Generators/#parameters_11","text":"gen: Generator [(K , V)] box max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_13","text":"Generator [ HashMap [K, V, HashIs [K] val] ref] box","title":"Returns"},{"location":"ponycheck-Generators/#one_oft-t","text":"[Source] Generate a random value from the given ReadSeq. This generator will generate nothing if the given xs is empty. Generators created with this method do not support shrinking. If do_shrink is set to true , it will return the same value for each shrink round. Otherwise it will return nothing. fun box one_of[T: T]( xs: ReadSeq[T] box, do_shrink: Bool val = false) : Generator[box->T] box","title":"one_of[T: T]"},{"location":"ponycheck-Generators/#parameters_12","text":"xs: ReadSeq [T] box do_shrink: Bool val = false","title":"Parameters"},{"location":"ponycheck-Generators/#returns_14","text":"Generator [box->T] box","title":"Returns"},{"location":"ponycheck-Generators/#one_of_safet-t","text":"[Source] Version of one_of that will error if xs is empty. fun box one_of_safe[T: T]( xs: ReadSeq[T] box, do_shrink: Bool val = false) : Generator[box->T] box ?","title":"one_of_safe[T: T]"},{"location":"ponycheck-Generators/#parameters_13","text":"xs: ReadSeq [T] box do_shrink: Bool val = false","title":"Parameters"},{"location":"ponycheck-Generators/#returns_15","text":"Generator [box->T] box ?","title":"Returns"},{"location":"ponycheck-Generators/#frequencyt-t","text":"[Source] chose a value of one of the given Generators, while controlling the distribution with the associated weights. The weights are of type USize and control how likely a value is chosen. The likelihood of a value v to be chosen is weight_v / weights_sum . If all weighted_generators have equal size the distribution will be uniform. Example of a generator to output odd U8 values twice as likely as even ones: Generators.frequency[U8]([ (1, Generators.u8().filter({(u) => (u, (u % 2) == 0 })) (2, Generators.u8().filter({(u) => (u, (u % 2) != 0 })) ]) fun box frequency[T: T]( weighted_generators: ReadSeq[(USize val , Generator[T] box)] box) : Generator[T] box","title":"frequency[T: T]"},{"location":"ponycheck-Generators/#parameters_14","text":"weighted_generators: ReadSeq [( USize val , Generator [T] box)] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_16","text":"Generator [T] box","title":"Returns"},{"location":"ponycheck-Generators/#frequency_safet-t","text":"[Source] Version of frequency that errors if the given weighted_generators is empty. fun box frequency_safe[T: T]( weighted_generators: ReadSeq[(USize val , Generator[T] box)] box) : Generator[T] box ?","title":"frequency_safe[T: T]"},{"location":"ponycheck-Generators/#parameters_15","text":"weighted_generators: ReadSeq [( USize val , Generator [T] box)] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_17","text":"Generator [T] box ?","title":"Returns"},{"location":"ponycheck-Generators/#zip2t1-t1-t2-t2","text":"[Source] zip two generators into a generator of a 2-tuple containing the values generated by both generators. fun box zip2[T1: T1, T2: T2]( gen1: Generator[T1] box, gen2: Generator[T2] box) : Generator[(T1 , T2)] box","title":"zip2[T1: T1, T2: T2]"},{"location":"ponycheck-Generators/#parameters_16","text":"gen1: Generator [T1] box gen2: Generator [T2] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_18","text":"Generator [(T1 , T2)] box","title":"Returns"},{"location":"ponycheck-Generators/#zip3t1-t1-t2-t2-t3-t3","text":"[Source] zip three generators into a generator of a 3-tuple containing the values generated by those three generators. fun box zip3[T1: T1, T2: T2, T3: T3]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box) : Generator[(T1 , T2 , T3)] box","title":"zip3[T1: T1, T2: T2, T3: T3]"},{"location":"ponycheck-Generators/#parameters_17","text":"gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_19","text":"Generator [(T1 , T2 , T3)] box","title":"Returns"},{"location":"ponycheck-Generators/#zip4t1-t1-t2-t2-t3-t3-t4-t4","text":"[Source] zip four generators into a generator of a 4-tuple containing the values generated by those four generators. fun box zip4[T1: T1, T2: T2, T3: T3, T4: T4]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box, gen4: Generator[T4] box) : Generator[(T1 , T2 , T3 , T4)] box","title":"zip4[T1: T1, T2: T2, T3: T3, T4: T4]"},{"location":"ponycheck-Generators/#parameters_18","text":"gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box gen4: Generator [T4] box","title":"Parameters"},{"location":"ponycheck-Generators/#returns_20","text":"Generator [(T1 , T2 , T3 , T4)] box","title":"Returns"},{"location":"ponycheck-Generators/#map2t1-t1-t2-t2-t3-t3","text":"[Source] convenience combinator for mapping 2 generators into 1 fun box map2[T1: T1, T2: T2, T3: T3]( gen1: Generator[T1] box, gen2: Generator[T2] box, fn: {(T1, T2): T3^}[T1, T2, T3] ref) : Generator[T3] box","title":"map2[T1: T1, T2: T2, T3: T3]"},{"location":"ponycheck-Generators/#parameters_19","text":"gen1: Generator [T1] box gen2: Generator [T2] box fn: {(T1, T2): T3^}[T1, T2, T3] ref","title":"Parameters"},{"location":"ponycheck-Generators/#returns_21","text":"Generator [T3] box","title":"Returns"},{"location":"ponycheck-Generators/#map3t1-t1-t2-t2-t3-t3-t4-t4","text":"[Source] convenience combinator for mapping 3 generators into 1 fun box map3[T1: T1, T2: T2, T3: T3, T4: T4]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box, fn: {(T1, T2, T3): T4^}[T1, T2, T3, T4] ref) : Generator[T4] box","title":"map3[T1: T1, T2: T2, T3: T3, T4: T4]"},{"location":"ponycheck-Generators/#parameters_20","text":"gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box fn: {(T1, T2, T3): T4^}[T1, T2, T3, T4] ref","title":"Parameters"},{"location":"ponycheck-Generators/#returns_22","text":"Generator [T4] box","title":"Returns"},{"location":"ponycheck-Generators/#map4t1-t1-t2-t2-t3-t3-t4-t4-t5-t5","text":"[Source] convenience combinator for mapping 4 generators into 1 fun box map4[T1: T1, T2: T2, T3: T3, T4: T4, T5: T5]( gen1: Generator[T1] box, gen2: Generator[T2] box, gen3: Generator[T3] box, gen4: Generator[T4] box, fn: {(T1, T2, T3, T4): T5^}[T1, T2, T3, T4, T5] ref) : Generator[T5] box","title":"map4[T1: T1, T2: T2, T3: T3, T4: T4, T5: T5]"},{"location":"ponycheck-Generators/#parameters_21","text":"gen1: Generator [T1] box gen2: Generator [T2] box gen3: Generator [T3] box gen4: Generator [T4] box fn: {(T1, T2, T3, T4): T5^}[T1, T2, T3, T4, T5] ref","title":"Parameters"},{"location":"ponycheck-Generators/#returns_23","text":"Generator [T5] box","title":"Returns"},{"location":"ponycheck-Generators/#bool","text":"[Source] create a generator of bool values. fun box bool() : Generator[Bool val] box","title":"bool"},{"location":"ponycheck-Generators/#returns_24","text":"Generator [ Bool val] box","title":"Returns"},{"location":"ponycheck-Generators/#u8","text":"[Source] create a generator for U8 values fun box u8( min: U8 val = call, max: U8 val = call) : Generator[U8 val] box","title":"u8"},{"location":"ponycheck-Generators/#parameters_22","text":"min: U8 val = call max: U8 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_25","text":"Generator [ U8 val] box","title":"Returns"},{"location":"ponycheck-Generators/#u16","text":"[Source] create a generator for U16 values fun box u16( min: U16 val = call, max: U16 val = call) : Generator[U16 val] box","title":"u16"},{"location":"ponycheck-Generators/#parameters_23","text":"min: U16 val = call max: U16 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_26","text":"Generator [ U16 val] box","title":"Returns"},{"location":"ponycheck-Generators/#u32","text":"[Source] create a generator for U32 values fun box u32( min: U32 val = call, max: U32 val = call) : Generator[U32 val] box","title":"u32"},{"location":"ponycheck-Generators/#parameters_24","text":"min: U32 val = call max: U32 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_27","text":"Generator [ U32 val] box","title":"Returns"},{"location":"ponycheck-Generators/#u64","text":"[Source] create a generator for U64 values fun box u64( min: U64 val = call, max: U64 val = call) : Generator[U64 val] box","title":"u64"},{"location":"ponycheck-Generators/#parameters_25","text":"min: U64 val = call max: U64 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_28","text":"Generator [ U64 val] box","title":"Returns"},{"location":"ponycheck-Generators/#u128","text":"[Source] create a generator for U128 values fun box u128( min: U128 val = call, max: U128 val = call) : Generator[U128 val] box","title":"u128"},{"location":"ponycheck-Generators/#parameters_26","text":"min: U128 val = call max: U128 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_29","text":"Generator [ U128 val] box","title":"Returns"},{"location":"ponycheck-Generators/#usize","text":"[Source] create a generator for USize values fun box usize( min: USize val = call, max: USize val = call) : Generator[USize val] box","title":"usize"},{"location":"ponycheck-Generators/#parameters_27","text":"min: USize val = call max: USize val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_30","text":"Generator [ USize val] box","title":"Returns"},{"location":"ponycheck-Generators/#ulong","text":"[Source] create a generator for ULong values fun box ulong( min: ULong val = call, max: ULong val = call) : Generator[ULong val] box","title":"ulong"},{"location":"ponycheck-Generators/#parameters_28","text":"min: ULong val = call max: ULong val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_31","text":"Generator [ ULong val] box","title":"Returns"},{"location":"ponycheck-Generators/#i8","text":"[Source] create a generator for I8 values fun box i8( min: I8 val = call, max: I8 val = call) : Generator[I8 val] box","title":"i8"},{"location":"ponycheck-Generators/#parameters_29","text":"min: I8 val = call max: I8 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_32","text":"Generator [ I8 val] box","title":"Returns"},{"location":"ponycheck-Generators/#i16","text":"[Source] create a generator for I16 values fun box i16( min: I16 val = call, max: I16 val = call) : Generator[I16 val] box","title":"i16"},{"location":"ponycheck-Generators/#parameters_30","text":"min: I16 val = call max: I16 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_33","text":"Generator [ I16 val] box","title":"Returns"},{"location":"ponycheck-Generators/#i32","text":"[Source] create a generator for I32 values fun box i32( min: I32 val = call, max: I32 val = call) : Generator[I32 val] box","title":"i32"},{"location":"ponycheck-Generators/#parameters_31","text":"min: I32 val = call max: I32 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_34","text":"Generator [ I32 val] box","title":"Returns"},{"location":"ponycheck-Generators/#i64","text":"[Source] create a generator for I64 values fun box i64( min: I64 val = call, max: I64 val = call) : Generator[I64 val] box","title":"i64"},{"location":"ponycheck-Generators/#parameters_32","text":"min: I64 val = call max: I64 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_35","text":"Generator [ I64 val] box","title":"Returns"},{"location":"ponycheck-Generators/#i128","text":"[Source] create a generator for I128 values fun box i128( min: I128 val = call, max: I128 val = call) : Generator[I128 val] box","title":"i128"},{"location":"ponycheck-Generators/#parameters_33","text":"min: I128 val = call max: I128 val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_36","text":"Generator [ I128 val] box","title":"Returns"},{"location":"ponycheck-Generators/#ilong","text":"[Source] create a generator for ILong values fun box ilong( min: ILong val = call, max: ILong val = call) : Generator[ILong val] box","title":"ilong"},{"location":"ponycheck-Generators/#parameters_34","text":"min: ILong val = call max: ILong val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_37","text":"Generator [ ILong val] box","title":"Returns"},{"location":"ponycheck-Generators/#isize","text":"[Source] create a generator for ISize values fun box isize( min: ISize val = call, max: ISize val = call) : Generator[ISize val] box","title":"isize"},{"location":"ponycheck-Generators/#parameters_35","text":"min: ISize val = call max: ISize val = call","title":"Parameters"},{"location":"ponycheck-Generators/#returns_38","text":"Generator [ ISize val] box","title":"Returns"},{"location":"ponycheck-Generators/#byte_string","text":"[Source] create a generator for strings generated from the bytes returned by the generator gen with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box byte_string( gen: Generator[U8 val] box, min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"byte_string"},{"location":"ponycheck-Generators/#parameters_36","text":"gen: Generator [ U8 val] box min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_39","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#ascii","text":"[Source] create a generator for strings withing the given range with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii( min: USize val = 0, max: USize val = 100, range: (ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val) = reference) : Generator[String val] box","title":"ascii"},{"location":"ponycheck-Generators/#parameters_37","text":"min: USize val = 0 max: USize val = 100 range: ( ASCIINUL val | ASCIIDigits val | ASCIIWhiteSpace val | ASCIIPunctuation val | ASCIILettersLower val | ASCIILettersUpper val | ASCIILetters val | ASCIIPrintable val | ASCIINonPrintable val | ASCIIAll val | ASCIIAllWithNUL val) = reference","title":"Parameters"},{"location":"ponycheck-Generators/#returns_40","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#ascii_printable","text":"[Source] create a generator for strings of printable ascii characters with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii_printable( min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"ascii_printable"},{"location":"ponycheck-Generators/#parameters_38","text":"min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_41","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#ascii_numeric","text":"[Source] create a generator for strings of numeric ascii characters with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii_numeric( min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"ascii_numeric"},{"location":"ponycheck-Generators/#parameters_39","text":"min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_42","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#ascii_letters","text":"[Source] create a generator for strings of ascii letters with a minimum length of min (default: 0) and a maximum length of max (default: 100). fun box ascii_letters( min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"ascii_letters"},{"location":"ponycheck-Generators/#parameters_40","text":"min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_43","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#utf32_codepoint_string","text":"[Source] create a generator for strings from a generator of unicode codepoints with a minimum length of min codepoints (default: 0) and a maximum length of max codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. fun box utf32_codepoint_string( gen: Generator[U32 val] box, min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"utf32_codepoint_string"},{"location":"ponycheck-Generators/#parameters_41","text":"gen: Generator [ U32 val] box min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_44","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#unicode","text":"[Source] create a generator for unicode strings with a minimum length of min codepoints (default: 0) and a maximum length of max codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. fun box unicode( min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"unicode"},{"location":"ponycheck-Generators/#parameters_42","text":"min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_45","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#unicode_bmp","text":"[Source] create a generator for unicode strings from the basic multilingual plane only with a minimum length of min codepoints (default: 0) and a maximum length of max codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. fun box unicode_bmp( min: USize val = 0, max: USize val = 100) : Generator[String val] box","title":"unicode_bmp"},{"location":"ponycheck-Generators/#parameters_43","text":"min: USize val = 0 max: USize val = 100","title":"Parameters"},{"location":"ponycheck-Generators/#returns_46","text":"Generator [ String val] box","title":"Returns"},{"location":"ponycheck-Generators/#eq","text":"[Source] fun box eq( that: Generators val) : Bool val","title":"eq"},{"location":"ponycheck-Generators/#parameters_44","text":"that: Generators val","title":"Parameters"},{"location":"ponycheck-Generators/#returns_47","text":"Bool val","title":"Returns"},{"location":"ponycheck-Generators/#ne","text":"[Source] fun box ne( that: Generators val) : Bool val","title":"ne"},{"location":"ponycheck-Generators/#parameters_45","text":"that: Generators val","title":"Parameters"},{"location":"ponycheck-Generators/#returns_48","text":"Bool val","title":"Returns"},{"location":"ponycheck-IntPairProperty/","text":"IntPairProperty \u00b6 [Source] A property implementation for conveniently evaluating properties for pairs of integers of all Pony integer types at once. The property needs to be formulated inside the method int_property : class CommutativeMultiplicationProperty is IntPairProperty fun name(): String => \"commutativity/mul\" fun int_property[T: (Int & Integer[T] val)](x: T, y: T, h: PropertyHelper)? => h.assert_eq[T](x * y, y * x) trait ref IntPairProperty is Property1[IntPairPropertySample ref] ref Implements \u00b6 Property1 [ IntPairPropertySample ref] ref Public Functions \u00b6 gen \u00b6 [Source] fun box gen() : Generator[IntPairPropertySample ref] box Returns \u00b6 Generator [ IntPairPropertySample ref] box property \u00b6 [Source] fun ref property( sample: IntPairPropertySample ref, h: PropertyHelper val) : None val ? Parameters \u00b6 sample: IntPairPropertySample ref h: PropertyHelper val Returns \u00b6 None val ? int_property[T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [T] val)] \u00b6 [Source] fun ref int_property[T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[T] val)]( x: T, y: T, h: PropertyHelper val) : None val ? Parameters \u00b6 x: T y: T h: PropertyHelper val Returns \u00b6 None val ? name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val params \u00b6 [Source] fun box params() : PropertyParams val Returns \u00b6 PropertyParams val","title":"trait IntPairProperty"},{"location":"ponycheck-IntPairProperty/#intpairproperty","text":"[Source] A property implementation for conveniently evaluating properties for pairs of integers of all Pony integer types at once. The property needs to be formulated inside the method int_property : class CommutativeMultiplicationProperty is IntPairProperty fun name(): String => \"commutativity/mul\" fun int_property[T: (Int & Integer[T] val)](x: T, y: T, h: PropertyHelper)? => h.assert_eq[T](x * y, y * x) trait ref IntPairProperty is Property1[IntPairPropertySample ref] ref","title":"IntPairProperty"},{"location":"ponycheck-IntPairProperty/#implements","text":"Property1 [ IntPairPropertySample ref] ref","title":"Implements"},{"location":"ponycheck-IntPairProperty/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-IntPairProperty/#gen","text":"[Source] fun box gen() : Generator[IntPairPropertySample ref] box","title":"gen"},{"location":"ponycheck-IntPairProperty/#returns","text":"Generator [ IntPairPropertySample ref] box","title":"Returns"},{"location":"ponycheck-IntPairProperty/#property","text":"[Source] fun ref property( sample: IntPairPropertySample ref, h: PropertyHelper val) : None val ?","title":"property"},{"location":"ponycheck-IntPairProperty/#parameters","text":"sample: IntPairPropertySample ref h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-IntPairProperty/#returns_1","text":"None val ?","title":"Returns"},{"location":"ponycheck-IntPairProperty/#int_propertyt-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integert-val","text":"[Source] fun ref int_property[T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[T] val)]( x: T, y: T, h: PropertyHelper val) : None val ?","title":"int_property[T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[T] val)]"},{"location":"ponycheck-IntPairProperty/#parameters_1","text":"x: T y: T h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-IntPairProperty/#returns_2","text":"None val ?","title":"Returns"},{"location":"ponycheck-IntPairProperty/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponycheck-IntPairProperty/#returns_3","text":"String val","title":"Returns"},{"location":"ponycheck-IntPairProperty/#params","text":"[Source] fun box params() : PropertyParams val","title":"params"},{"location":"ponycheck-IntPairProperty/#returns_4","text":"PropertyParams val","title":"Returns"},{"location":"ponycheck-IntPairPropertySample/","text":"IntPairPropertySample \u00b6 [Source] class ref IntPairPropertySample is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new ref create( choice': U8 val, int1': U128 val, int2': U128 val) : IntPairPropertySample ref^ Parameters \u00b6 choice': U8 val int1': U128 val int2': U128 val Returns \u00b6 IntPairPropertySample ref^ Public fields \u00b6 let choice: U8 val \u00b6 [Source] let int1: U128 val \u00b6 [Source] let int2: U128 val \u00b6 [Source] Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"class IntPairPropertySample"},{"location":"ponycheck-IntPairPropertySample/#intpairpropertysample","text":"[Source] class ref IntPairPropertySample is Stringable box","title":"IntPairPropertySample"},{"location":"ponycheck-IntPairPropertySample/#implements","text":"Stringable box","title":"Implements"},{"location":"ponycheck-IntPairPropertySample/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-IntPairPropertySample/#create","text":"[Source] new ref create( choice': U8 val, int1': U128 val, int2': U128 val) : IntPairPropertySample ref^","title":"create"},{"location":"ponycheck-IntPairPropertySample/#parameters","text":"choice': U8 val int1': U128 val int2': U128 val","title":"Parameters"},{"location":"ponycheck-IntPairPropertySample/#returns","text":"IntPairPropertySample ref^","title":"Returns"},{"location":"ponycheck-IntPairPropertySample/#public-fields","text":"","title":"Public fields"},{"location":"ponycheck-IntPairPropertySample/#let-choice-u8-val","text":"[Source]","title":"let choice: U8 val"},{"location":"ponycheck-IntPairPropertySample/#let-int1-u128-val","text":"[Source]","title":"let int1: U128 val"},{"location":"ponycheck-IntPairPropertySample/#let-int2-u128-val","text":"[Source]","title":"let int2: U128 val"},{"location":"ponycheck-IntPairPropertySample/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-IntPairPropertySample/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"ponycheck-IntPairPropertySample/#returns_1","text":"String iso^","title":"Returns"},{"location":"ponycheck-IntProperty/","text":"IntProperty \u00b6 [Source] A property implementation for conveniently evaluating properties for all Pony Integer types at once. The property needs to be formulated inside the method int_property : class DivisionByZeroProperty is IntProperty fun name(): String => \"div/0\" fun int_property[T: (Int & Integer[T] val)](x: T, h: PropertyHelper)? => h.assert_eq[T](T.from[U8](0), x / T.from[U8](0)) trait ref IntProperty is Property1[IntPropertySample ref] ref Implements \u00b6 Property1 [ IntPropertySample ref] ref Public Functions \u00b6 gen \u00b6 [Source] fun box gen() : Generator[IntPropertySample ref] box Returns \u00b6 Generator [ IntPropertySample ref] box property \u00b6 [Source] fun ref property( sample: IntPropertySample ref, h: PropertyHelper val) : None val ? Parameters \u00b6 sample: IntPropertySample ref h: PropertyHelper val Returns \u00b6 None val ? int_property[T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [T] val)] \u00b6 [Source] fun ref int_property[T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[T] val)]( x: T, h: PropertyHelper val) : None val ? Parameters \u00b6 x: T h: PropertyHelper val Returns \u00b6 None val ? name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val params \u00b6 [Source] fun box params() : PropertyParams val Returns \u00b6 PropertyParams val","title":"trait IntProperty"},{"location":"ponycheck-IntProperty/#intproperty","text":"[Source] A property implementation for conveniently evaluating properties for all Pony Integer types at once. The property needs to be formulated inside the method int_property : class DivisionByZeroProperty is IntProperty fun name(): String => \"div/0\" fun int_property[T: (Int & Integer[T] val)](x: T, h: PropertyHelper)? => h.assert_eq[T](T.from[U8](0), x / T.from[U8](0)) trait ref IntProperty is Property1[IntPropertySample ref] ref","title":"IntProperty"},{"location":"ponycheck-IntProperty/#implements","text":"Property1 [ IntPropertySample ref] ref","title":"Implements"},{"location":"ponycheck-IntProperty/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-IntProperty/#gen","text":"[Source] fun box gen() : Generator[IntPropertySample ref] box","title":"gen"},{"location":"ponycheck-IntProperty/#returns","text":"Generator [ IntPropertySample ref] box","title":"Returns"},{"location":"ponycheck-IntProperty/#property","text":"[Source] fun ref property( sample: IntPropertySample ref, h: PropertyHelper val) : None val ?","title":"property"},{"location":"ponycheck-IntProperty/#parameters","text":"sample: IntPropertySample ref h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-IntProperty/#returns_1","text":"None val ?","title":"Returns"},{"location":"ponycheck-IntProperty/#int_propertyt-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integert-val","text":"[Source] fun ref int_property[T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[T] val)]( x: T, h: PropertyHelper val) : None val ?","title":"int_property[T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[T] val)]"},{"location":"ponycheck-IntProperty/#parameters_1","text":"x: T h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-IntProperty/#returns_2","text":"None val ?","title":"Returns"},{"location":"ponycheck-IntProperty/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponycheck-IntProperty/#returns_3","text":"String val","title":"Returns"},{"location":"ponycheck-IntProperty/#params","text":"[Source] fun box params() : PropertyParams val","title":"params"},{"location":"ponycheck-IntProperty/#returns_4","text":"PropertyParams val","title":"Returns"},{"location":"ponycheck-IntPropertySample/","text":"IntPropertySample \u00b6 [Source] class ref IntPropertySample is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new ref create( choice': U8 val, int': U128 val) : IntPropertySample ref^ Parameters \u00b6 choice': U8 val int': U128 val Returns \u00b6 IntPropertySample ref^ Public fields \u00b6 let choice: U8 val \u00b6 [Source] let int: U128 val \u00b6 [Source] Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"class IntPropertySample"},{"location":"ponycheck-IntPropertySample/#intpropertysample","text":"[Source] class ref IntPropertySample is Stringable box","title":"IntPropertySample"},{"location":"ponycheck-IntPropertySample/#implements","text":"Stringable box","title":"Implements"},{"location":"ponycheck-IntPropertySample/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-IntPropertySample/#create","text":"[Source] new ref create( choice': U8 val, int': U128 val) : IntPropertySample ref^","title":"create"},{"location":"ponycheck-IntPropertySample/#parameters","text":"choice': U8 val int': U128 val","title":"Parameters"},{"location":"ponycheck-IntPropertySample/#returns","text":"IntPropertySample ref^","title":"Returns"},{"location":"ponycheck-IntPropertySample/#public-fields","text":"","title":"Public fields"},{"location":"ponycheck-IntPropertySample/#let-choice-u8-val","text":"[Source]","title":"let choice: U8 val"},{"location":"ponycheck-IntPropertySample/#let-int-u128-val","text":"[Source]","title":"let int: U128 val"},{"location":"ponycheck-IntPropertySample/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-IntPropertySample/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"ponycheck-IntPropertySample/#returns_1","text":"String iso^","title":"Returns"},{"location":"ponycheck-Ponycheck/","text":"Ponycheck \u00b6 [Source] primitive val Ponycheck Constructors \u00b6 create \u00b6 [Source] new val create() : Ponycheck val^ Returns \u00b6 Ponycheck val^ Public Functions \u00b6 for_all[T: T] \u00b6 [Source] convenience method for running 1 to many properties as part of one ponytest UnitTest. Example: class MyTestWithSomeProperties is UnitTest fun name(): String => \"mytest/withMultipleProperties\" fun apply(h: TestHelper) => Ponycheck.for_all[U8](recover Generators.unit[U8](0) end, h)( {(u, h) => h.assert_eq(u, 0) consume u }) fun box for_all[T: T]( gen: Generator[T] val, h: TestHelper val) : ForAll[T] ref Parameters \u00b6 gen: Generator [T] val h: TestHelper val Returns \u00b6 ForAll [T] ref for_all2[T1: T1, T2: T2] \u00b6 [Source] fun box for_all2[T1: T1, T2: T2]( gen1: Generator[T1] val, gen2: Generator[T2] val, h: TestHelper val) : ForAll2[T1, T2] ref Parameters \u00b6 gen1: Generator [T1] val gen2: Generator [T2] val h: TestHelper val Returns \u00b6 ForAll2 [T1, T2] ref for_all3[T1: T1, T2: T2, T3: T3] \u00b6 [Source] fun box for_all3[T1: T1, T2: T2, T3: T3]( gen1: Generator[T1] val, gen2: Generator[T2] val, gen3: Generator[T3] val, h: TestHelper val) : ForAll3[T1, T2, T3] ref Parameters \u00b6 gen1: Generator [T1] val gen2: Generator [T2] val gen3: Generator [T3] val h: TestHelper val Returns \u00b6 ForAll3 [T1, T2, T3] ref for_all4[T1: T1, T2: T2, T3: T3, T4: T4] \u00b6 [Source] fun box for_all4[T1: T1, T2: T2, T3: T3, T4: T4]( gen1: Generator[T1] val, gen2: Generator[T2] val, gen3: Generator[T3] val, gen4: Generator[T4] val, h: TestHelper val) : ForAll4[T1, T2, T3, T4] ref Parameters \u00b6 gen1: Generator [T1] val gen2: Generator [T2] val gen3: Generator [T3] val gen4: Generator [T4] val h: TestHelper val Returns \u00b6 ForAll4 [T1, T2, T3, T4] ref eq \u00b6 [Source] fun box eq( that: Ponycheck val) : Bool val Parameters \u00b6 that: Ponycheck val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Ponycheck val) : Bool val Parameters \u00b6 that: Ponycheck val Returns \u00b6 Bool val","title":"primitive Ponycheck"},{"location":"ponycheck-Ponycheck/#ponycheck","text":"[Source] primitive val Ponycheck","title":"Ponycheck"},{"location":"ponycheck-Ponycheck/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-Ponycheck/#create","text":"[Source] new val create() : Ponycheck val^","title":"create"},{"location":"ponycheck-Ponycheck/#returns","text":"Ponycheck val^","title":"Returns"},{"location":"ponycheck-Ponycheck/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Ponycheck/#for_allt-t","text":"[Source] convenience method for running 1 to many properties as part of one ponytest UnitTest. Example: class MyTestWithSomeProperties is UnitTest fun name(): String => \"mytest/withMultipleProperties\" fun apply(h: TestHelper) => Ponycheck.for_all[U8](recover Generators.unit[U8](0) end, h)( {(u, h) => h.assert_eq(u, 0) consume u }) fun box for_all[T: T]( gen: Generator[T] val, h: TestHelper val) : ForAll[T] ref","title":"for_all[T: T]"},{"location":"ponycheck-Ponycheck/#parameters","text":"gen: Generator [T] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-Ponycheck/#returns_1","text":"ForAll [T] ref","title":"Returns"},{"location":"ponycheck-Ponycheck/#for_all2t1-t1-t2-t2","text":"[Source] fun box for_all2[T1: T1, T2: T2]( gen1: Generator[T1] val, gen2: Generator[T2] val, h: TestHelper val) : ForAll2[T1, T2] ref","title":"for_all2[T1: T1, T2: T2]"},{"location":"ponycheck-Ponycheck/#parameters_1","text":"gen1: Generator [T1] val gen2: Generator [T2] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-Ponycheck/#returns_2","text":"ForAll2 [T1, T2] ref","title":"Returns"},{"location":"ponycheck-Ponycheck/#for_all3t1-t1-t2-t2-t3-t3","text":"[Source] fun box for_all3[T1: T1, T2: T2, T3: T3]( gen1: Generator[T1] val, gen2: Generator[T2] val, gen3: Generator[T3] val, h: TestHelper val) : ForAll3[T1, T2, T3] ref","title":"for_all3[T1: T1, T2: T2, T3: T3]"},{"location":"ponycheck-Ponycheck/#parameters_2","text":"gen1: Generator [T1] val gen2: Generator [T2] val gen3: Generator [T3] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-Ponycheck/#returns_3","text":"ForAll3 [T1, T2, T3] ref","title":"Returns"},{"location":"ponycheck-Ponycheck/#for_all4t1-t1-t2-t2-t3-t3-t4-t4","text":"[Source] fun box for_all4[T1: T1, T2: T2, T3: T3, T4: T4]( gen1: Generator[T1] val, gen2: Generator[T2] val, gen3: Generator[T3] val, gen4: Generator[T4] val, h: TestHelper val) : ForAll4[T1, T2, T3, T4] ref","title":"for_all4[T1: T1, T2: T2, T3: T3, T4: T4]"},{"location":"ponycheck-Ponycheck/#parameters_3","text":"gen1: Generator [T1] val gen2: Generator [T2] val gen3: Generator [T3] val gen4: Generator [T4] val h: TestHelper val","title":"Parameters"},{"location":"ponycheck-Ponycheck/#returns_4","text":"ForAll4 [T1, T2, T3, T4] ref","title":"Returns"},{"location":"ponycheck-Ponycheck/#eq","text":"[Source] fun box eq( that: Ponycheck val) : Bool val","title":"eq"},{"location":"ponycheck-Ponycheck/#parameters_4","text":"that: Ponycheck val","title":"Parameters"},{"location":"ponycheck-Ponycheck/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponycheck-Ponycheck/#ne","text":"[Source] fun box ne( that: Ponycheck val) : Bool val","title":"ne"},{"location":"ponycheck-Ponycheck/#parameters_5","text":"that: Ponycheck val","title":"Parameters"},{"location":"ponycheck-Ponycheck/#returns_6","text":"Bool val","title":"Returns"},{"location":"ponycheck-Poperator/","text":"Poperator[T: T] \u00b6 [Source] iterate over a Seq descructively by pop ing its elements once has_next() returns false , the Seq is empty. Nominee for the annual pony class-naming awards. class ref Poperator[T: T] is Iterator[T^] ref Implements \u00b6 Iterator [T^] ref Constructors \u00b6 create \u00b6 [Source] new ref create( seq: Seq[T] ref) : Poperator[T] ref^ Parameters \u00b6 seq: Seq [T] ref Returns \u00b6 Poperator [T] ref^ empty \u00b6 [Source] new ref empty() : Poperator[T] ref^ Returns \u00b6 Poperator [T] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : T^ ? Returns \u00b6 T^ ?","title":"class Poperator"},{"location":"ponycheck-Poperator/#poperatort-t","text":"[Source] iterate over a Seq descructively by pop ing its elements once has_next() returns false , the Seq is empty. Nominee for the annual pony class-naming awards. class ref Poperator[T: T] is Iterator[T^] ref","title":"Poperator[T: T]"},{"location":"ponycheck-Poperator/#implements","text":"Iterator [T^] ref","title":"Implements"},{"location":"ponycheck-Poperator/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-Poperator/#create","text":"[Source] new ref create( seq: Seq[T] ref) : Poperator[T] ref^","title":"create"},{"location":"ponycheck-Poperator/#parameters","text":"seq: Seq [T] ref","title":"Parameters"},{"location":"ponycheck-Poperator/#returns","text":"Poperator [T] ref^","title":"Returns"},{"location":"ponycheck-Poperator/#empty","text":"[Source] new ref empty() : Poperator[T] ref^","title":"empty"},{"location":"ponycheck-Poperator/#returns_1","text":"Poperator [T] ref^","title":"Returns"},{"location":"ponycheck-Poperator/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Poperator/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"ponycheck-Poperator/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponycheck-Poperator/#next","text":"[Source] fun ref next() : T^ ?","title":"next"},{"location":"ponycheck-Poperator/#returns_3","text":"T^ ?","title":"Returns"},{"location":"ponycheck-Property1/","text":"Property1[T: T] \u00b6 [Source] A property that consumes 1 argument of type T . A property is defined by a Generator , returned by the gen() method and a property method that consumes the generators output and verifies a custom property with the help of a PropertyHelper . A property is verified if no failed assertion on PropertyHelper has been reported for all the samples it consumed. The property execution can be customized by returning a custom PropertyParams from the [ params() ]*ponycheck-Property1.md#params) method. The gen() method is called exactly once to instantiate the generator. The generator produces PropertyParams.num_samples samples and each is passed to the property method for verification. If the property did not verify, the given sample is shrunken, if the generator supports shrinking. The smallest shrunken sample will then be reported to the user. A Property1 can be run with Ponytest . To that end it needs to be wrapped into a Property1UnitTest . trait ref Property1[T: T] Public Functions \u00b6 name \u00b6 [Source] The name of the property used for reporting during execution. fun box name() : String val Returns \u00b6 String val params \u00b6 [Source] Returns parameters to customize execution of this Property. fun box params() : PropertyParams val Returns \u00b6 PropertyParams val gen \u00b6 [Source] The Generator used to produce samples to verify. fun box gen() : Generator[T] box Returns \u00b6 Generator [T] box property \u00b6 [Source] A method verifying that a certain property holds for all given arg1 with the help of PropertyHelper h . fun ref property( arg1: T, h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: T h: PropertyHelper val Returns \u00b6 None val ?","title":"trait Property1"},{"location":"ponycheck-Property1/#property1t-t","text":"[Source] A property that consumes 1 argument of type T . A property is defined by a Generator , returned by the gen() method and a property method that consumes the generators output and verifies a custom property with the help of a PropertyHelper . A property is verified if no failed assertion on PropertyHelper has been reported for all the samples it consumed. The property execution can be customized by returning a custom PropertyParams from the [ params() ]*ponycheck-Property1.md#params) method. The gen() method is called exactly once to instantiate the generator. The generator produces PropertyParams.num_samples samples and each is passed to the property method for verification. If the property did not verify, the given sample is shrunken, if the generator supports shrinking. The smallest shrunken sample will then be reported to the user. A Property1 can be run with Ponytest . To that end it needs to be wrapped into a Property1UnitTest . trait ref Property1[T: T]","title":"Property1[T: T]"},{"location":"ponycheck-Property1/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Property1/#name","text":"[Source] The name of the property used for reporting during execution. fun box name() : String val","title":"name"},{"location":"ponycheck-Property1/#returns","text":"String val","title":"Returns"},{"location":"ponycheck-Property1/#params","text":"[Source] Returns parameters to customize execution of this Property. fun box params() : PropertyParams val","title":"params"},{"location":"ponycheck-Property1/#returns_1","text":"PropertyParams val","title":"Returns"},{"location":"ponycheck-Property1/#gen","text":"[Source] The Generator used to produce samples to verify. fun box gen() : Generator[T] box","title":"gen"},{"location":"ponycheck-Property1/#returns_2","text":"Generator [T] box","title":"Returns"},{"location":"ponycheck-Property1/#property","text":"[Source] A method verifying that a certain property holds for all given arg1 with the help of PropertyHelper h . fun ref property( arg1: T, h: PropertyHelper val) : None val ?","title":"property"},{"location":"ponycheck-Property1/#parameters","text":"arg1: T h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property1/#returns_3","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property2/","text":"Property2[T1: T1, T2: T2] \u00b6 [Source] trait ref Property2[T1: T1, T2: T2] is Property1[(T1 , T2)] ref Implements \u00b6 Property1 [(T1 , T2)] ref Public Functions \u00b6 gen1 \u00b6 [Source] The Generator for the first argument to your property2 . fun box gen1() : Generator[T1] box Returns \u00b6 Generator [T1] box gen2 \u00b6 [Source] The Generator for the second argument to your property2 . fun box gen2() : Generator[T2] box Returns \u00b6 Generator [T2] box gen \u00b6 [Source] fun box gen() : Generator[(T1 , T2)] box Returns \u00b6 Generator [(T1 , T2)] box property \u00b6 [Source] fun ref property( arg1: (T1 , T2), h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: (T1 , T2) h: PropertyHelper val Returns \u00b6 None val ? property2 \u00b6 [Source] A method verifying that a certain property holds for all given arg1 and arg2 with the help of PropertyHelper h . fun ref property2( arg1: T1, arg2: T2, h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: T1 arg2: T2 h: PropertyHelper val Returns \u00b6 None val ? name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val params \u00b6 [Source] fun box params() : PropertyParams val Returns \u00b6 PropertyParams val","title":"trait Property2"},{"location":"ponycheck-Property2/#property2t1-t1-t2-t2","text":"[Source] trait ref Property2[T1: T1, T2: T2] is Property1[(T1 , T2)] ref","title":"Property2[T1: T1, T2: T2]"},{"location":"ponycheck-Property2/#implements","text":"Property1 [(T1 , T2)] ref","title":"Implements"},{"location":"ponycheck-Property2/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Property2/#gen1","text":"[Source] The Generator for the first argument to your property2 . fun box gen1() : Generator[T1] box","title":"gen1"},{"location":"ponycheck-Property2/#returns","text":"Generator [T1] box","title":"Returns"},{"location":"ponycheck-Property2/#gen2","text":"[Source] The Generator for the second argument to your property2 . fun box gen2() : Generator[T2] box","title":"gen2"},{"location":"ponycheck-Property2/#returns_1","text":"Generator [T2] box","title":"Returns"},{"location":"ponycheck-Property2/#gen","text":"[Source] fun box gen() : Generator[(T1 , T2)] box","title":"gen"},{"location":"ponycheck-Property2/#returns_2","text":"Generator [(T1 , T2)] box","title":"Returns"},{"location":"ponycheck-Property2/#property","text":"[Source] fun ref property( arg1: (T1 , T2), h: PropertyHelper val) : None val ?","title":"property"},{"location":"ponycheck-Property2/#parameters","text":"arg1: (T1 , T2) h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property2/#returns_3","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property2/#property2","text":"[Source] A method verifying that a certain property holds for all given arg1 and arg2 with the help of PropertyHelper h . fun ref property2( arg1: T1, arg2: T2, h: PropertyHelper val) : None val ?","title":"property2"},{"location":"ponycheck-Property2/#parameters_1","text":"arg1: T1 arg2: T2 h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property2/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property2/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponycheck-Property2/#returns_5","text":"String val","title":"Returns"},{"location":"ponycheck-Property2/#params","text":"[Source] fun box params() : PropertyParams val","title":"params"},{"location":"ponycheck-Property2/#returns_6","text":"PropertyParams val","title":"Returns"},{"location":"ponycheck-Property3/","text":"Property3[T1: T1, T2: T2, T3: T3] \u00b6 [Source] trait ref Property3[T1: T1, T2: T2, T3: T3] is Property1[(T1 , T2 , T3)] ref Implements \u00b6 Property1 [(T1 , T2 , T3)] ref Public Functions \u00b6 gen1 \u00b6 [Source] The Generator for the first argument to your property3 method. fun box gen1() : Generator[T1] box Returns \u00b6 Generator [T1] box gen2 \u00b6 [Source] The Generator for the second argument to your property3 method. fun box gen2() : Generator[T2] box Returns \u00b6 Generator [T2] box gen3 \u00b6 [Source] The Generator for the third argument to your property3 method. fun box gen3() : Generator[T3] box Returns \u00b6 Generator [T3] box gen \u00b6 [Source] fun box gen() : Generator[(T1 , T2 , T3)] box Returns \u00b6 Generator [(T1 , T2 , T3)] box property \u00b6 [Source] fun ref property( arg1: (T1 , T2 , T3), h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: (T1 , T2 , T3) h: PropertyHelper val Returns \u00b6 None val ? property3 \u00b6 [Source] A method verifying that a certain property holds for all given arg1 , arg2 and arg3 with the help of PropertyHelper h . fun ref property3( arg1: T1, arg2: T2, arg3: T3, h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: T1 arg2: T2 arg3: T3 h: PropertyHelper val Returns \u00b6 None val ? name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val params \u00b6 [Source] fun box params() : PropertyParams val Returns \u00b6 PropertyParams val","title":"trait Property3"},{"location":"ponycheck-Property3/#property3t1-t1-t2-t2-t3-t3","text":"[Source] trait ref Property3[T1: T1, T2: T2, T3: T3] is Property1[(T1 , T2 , T3)] ref","title":"Property3[T1: T1, T2: T2, T3: T3]"},{"location":"ponycheck-Property3/#implements","text":"Property1 [(T1 , T2 , T3)] ref","title":"Implements"},{"location":"ponycheck-Property3/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Property3/#gen1","text":"[Source] The Generator for the first argument to your property3 method. fun box gen1() : Generator[T1] box","title":"gen1"},{"location":"ponycheck-Property3/#returns","text":"Generator [T1] box","title":"Returns"},{"location":"ponycheck-Property3/#gen2","text":"[Source] The Generator for the second argument to your property3 method. fun box gen2() : Generator[T2] box","title":"gen2"},{"location":"ponycheck-Property3/#returns_1","text":"Generator [T2] box","title":"Returns"},{"location":"ponycheck-Property3/#gen3","text":"[Source] The Generator for the third argument to your property3 method. fun box gen3() : Generator[T3] box","title":"gen3"},{"location":"ponycheck-Property3/#returns_2","text":"Generator [T3] box","title":"Returns"},{"location":"ponycheck-Property3/#gen","text":"[Source] fun box gen() : Generator[(T1 , T2 , T3)] box","title":"gen"},{"location":"ponycheck-Property3/#returns_3","text":"Generator [(T1 , T2 , T3)] box","title":"Returns"},{"location":"ponycheck-Property3/#property","text":"[Source] fun ref property( arg1: (T1 , T2 , T3), h: PropertyHelper val) : None val ?","title":"property"},{"location":"ponycheck-Property3/#parameters","text":"arg1: (T1 , T2 , T3) h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property3/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property3/#property3","text":"[Source] A method verifying that a certain property holds for all given arg1 , arg2 and arg3 with the help of PropertyHelper h . fun ref property3( arg1: T1, arg2: T2, arg3: T3, h: PropertyHelper val) : None val ?","title":"property3"},{"location":"ponycheck-Property3/#parameters_1","text":"arg1: T1 arg2: T2 arg3: T3 h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property3/#returns_5","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property3/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponycheck-Property3/#returns_6","text":"String val","title":"Returns"},{"location":"ponycheck-Property3/#params","text":"[Source] fun box params() : PropertyParams val","title":"params"},{"location":"ponycheck-Property3/#returns_7","text":"PropertyParams val","title":"Returns"},{"location":"ponycheck-Property4/","text":"Property4[T1: T1, T2: T2, T3: T3, T4: T4] \u00b6 [Source] trait ref Property4[T1: T1, T2: T2, T3: T3, T4: T4] is Property1[(T1 , T2 , T3 , T4)] ref Implements \u00b6 Property1 [(T1 , T2 , T3 , T4)] ref Public Functions \u00b6 gen1 \u00b6 [Source] The Generator for the first argument to your property4 method. fun box gen1() : Generator[T1] box Returns \u00b6 Generator [T1] box gen2 \u00b6 [Source] The Generator for the second argument to your property4 method. fun box gen2() : Generator[T2] box Returns \u00b6 Generator [T2] box gen3 \u00b6 [Source] The Generator for the third argument to your property4 method. fun box gen3() : Generator[T3] box Returns \u00b6 Generator [T3] box gen4 \u00b6 [Source] The Generator for the fourth argument to your property4 method. fun box gen4() : Generator[T4] box Returns \u00b6 Generator [T4] box gen \u00b6 [Source] fun box gen() : Generator[(T1 , T2 , T3 , T4)] box Returns \u00b6 Generator [(T1 , T2 , T3 , T4)] box property \u00b6 [Source] fun ref property( arg1: (T1 , T2 , T3 , T4), h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: (T1 , T2 , T3 , T4) h: PropertyHelper val Returns \u00b6 None val ? property4 \u00b6 [Source] A method verifying that a certain property holds for all given arg1 , arg2 , arg3 , arg4 with the help of PropertyHelper h . fun ref property4( arg1: T1, arg2: T2, arg3: T3, arg4: T4, h: PropertyHelper val) : None val ? Parameters \u00b6 arg1: T1 arg2: T2 arg3: T3 arg4: T4 h: PropertyHelper val Returns \u00b6 None val ? name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val params \u00b6 [Source] fun box params() : PropertyParams val Returns \u00b6 PropertyParams val","title":"trait Property4"},{"location":"ponycheck-Property4/#property4t1-t1-t2-t2-t3-t3-t4-t4","text":"[Source] trait ref Property4[T1: T1, T2: T2, T3: T3, T4: T4] is Property1[(T1 , T2 , T3 , T4)] ref","title":"Property4[T1: T1, T2: T2, T3: T3, T4: T4]"},{"location":"ponycheck-Property4/#implements","text":"Property1 [(T1 , T2 , T3 , T4)] ref","title":"Implements"},{"location":"ponycheck-Property4/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Property4/#gen1","text":"[Source] The Generator for the first argument to your property4 method. fun box gen1() : Generator[T1] box","title":"gen1"},{"location":"ponycheck-Property4/#returns","text":"Generator [T1] box","title":"Returns"},{"location":"ponycheck-Property4/#gen2","text":"[Source] The Generator for the second argument to your property4 method. fun box gen2() : Generator[T2] box","title":"gen2"},{"location":"ponycheck-Property4/#returns_1","text":"Generator [T2] box","title":"Returns"},{"location":"ponycheck-Property4/#gen3","text":"[Source] The Generator for the third argument to your property4 method. fun box gen3() : Generator[T3] box","title":"gen3"},{"location":"ponycheck-Property4/#returns_2","text":"Generator [T3] box","title":"Returns"},{"location":"ponycheck-Property4/#gen4","text":"[Source] The Generator for the fourth argument to your property4 method. fun box gen4() : Generator[T4] box","title":"gen4"},{"location":"ponycheck-Property4/#returns_3","text":"Generator [T4] box","title":"Returns"},{"location":"ponycheck-Property4/#gen","text":"[Source] fun box gen() : Generator[(T1 , T2 , T3 , T4)] box","title":"gen"},{"location":"ponycheck-Property4/#returns_4","text":"Generator [(T1 , T2 , T3 , T4)] box","title":"Returns"},{"location":"ponycheck-Property4/#property","text":"[Source] fun ref property( arg1: (T1 , T2 , T3 , T4), h: PropertyHelper val) : None val ?","title":"property"},{"location":"ponycheck-Property4/#parameters","text":"arg1: (T1 , T2 , T3 , T4) h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property4/#returns_5","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property4/#property4","text":"[Source] A method verifying that a certain property holds for all given arg1 , arg2 , arg3 , arg4 with the help of PropertyHelper h . fun ref property4( arg1: T1, arg2: T2, arg3: T3, arg4: T4, h: PropertyHelper val) : None val ?","title":"property4"},{"location":"ponycheck-Property4/#parameters_1","text":"arg1: T1 arg2: T2 arg3: T3 arg4: T4 h: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-Property4/#returns_6","text":"None val ?","title":"Returns"},{"location":"ponycheck-Property4/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponycheck-Property4/#returns_7","text":"String val","title":"Returns"},{"location":"ponycheck-Property4/#params","text":"[Source] fun box params() : PropertyParams val","title":"params"},{"location":"ponycheck-Property4/#returns_8","text":"PropertyParams val","title":"Returns"},{"location":"ponycheck-PropertyHelper/","text":"PropertyHelper \u00b6 [Source] Helper for ponycheck properties. Mirrors the TestHelper API as close as possible. Contains assertion functions and functions for completing asynchronous properties, for expecting and completing or failing actions. Internally a new PropertyHelper will be created for each call to a property with a new sample and also for every shrink run. So don't assume anything about the identity of the PropertyHelper inside of your Properties. This class is val by default so it can be safely passed around to other actors. It exposes the process Env as public env field in order to give access to the root authority and other stuff. class val PropertyHelper Constructors \u00b6 create \u00b6 [Source] new val create( env': Env val, runner: _IPropertyRunner tag, run_notify: _PropertyRunNotify val, run_context: String val) : PropertyHelper val^ Parameters \u00b6 env': Env val runner: _IPropertyRunner tag run_notify: _PropertyRunNotify val run_context: String val Returns \u00b6 PropertyHelper val^ Public fields \u00b6 let env: Env val \u00b6 [Source] Public Functions \u00b6 log \u00b6 [Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = false) : None val Parameters \u00b6 msg: String val verbose: Bool val = false Returns \u00b6 None val fail \u00b6 [Source] Flag the test as having failed. fun box fail( msg: String val = \"Test failed\") : None val Parameters \u00b6 msg: String val = \"Test failed\" Returns \u00b6 None val assert_false \u00b6 [Source] Assert that the given expression is false. fun box assert_false( predicate: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 predicate: Bool val msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_true \u00b6 [Source] Assert that the given expression is true. fun box assert_true( predicate: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 predicate: Bool val msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_error \u00b6 [Source] Assert that the given test function throws an error when run. fun box assert_error( test: {(): None ?} box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 test: {(): None ?} box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_no_error \u00b6 [Source] Assert that the given test function does not throw an error when run. fun box assert_no_error( test: {(): None ?} box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 test: {(): None ?} box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_is[A: A] \u00b6 [Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_isnt[A: A] \u00b6 [Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_eq[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_ne[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_array_eq[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the contents of the 2 given ReadSeqs are equal. fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_array_eq_unordered[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val expect_action \u00b6 [Source] expect some action of the given name to complete for the property to hold. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. Call complete_action(name) or fail_action(name) to mark some action as completed. Example: actor AsyncActor let _ph: PropertyHelper new create(ph: PropertyHelper) => _ph = ph be complete(s: String) => if (s.size() % 2) == 0 then _ph.complete_action(\"is_even\") else _ph.fail_action(\"is_even\") class EvenStringProperty is Property1[String] fun name(): String => \"even_string\" fun gen(): Generator[String] => Generators.ascii() fun property(arg1: String, ph: PropertyHelper) => ph.expect_action(\"is_even\") AsyncActor(ph).check(arg1) fun box expect_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val complete_action \u00b6 [Source] Complete an expected action successfully. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. If the action name was not expected, i.e. was not registered using expect_action , nothing happens. fun val complete_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val fail_action \u00b6 [Source] Mark an expected action as failed. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. fun val fail_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val complete \u00b6 [Source] Complete an asynchronous property successfully. Once this method is called the property is considered successful or failing depending on the value of the parameter success . For more fine grained control over completing or failing a property that consists of many steps, consider using expect_action , complete_action and fail_action . fun box complete( success: Bool val) : None val Parameters \u00b6 success: Bool val Returns \u00b6 None val dispose_when_done \u00b6 [Source] Dispose the actor after a property run / a shrink is done. fun box dispose_when_done( disposable: DisposableActor tag) : None val Parameters \u00b6 disposable: DisposableActor tag Returns \u00b6 None val","title":"class PropertyHelper"},{"location":"ponycheck-PropertyHelper/#propertyhelper","text":"[Source] Helper for ponycheck properties. Mirrors the TestHelper API as close as possible. Contains assertion functions and functions for completing asynchronous properties, for expecting and completing or failing actions. Internally a new PropertyHelper will be created for each call to a property with a new sample and also for every shrink run. So don't assume anything about the identity of the PropertyHelper inside of your Properties. This class is val by default so it can be safely passed around to other actors. It exposes the process Env as public env field in order to give access to the root authority and other stuff. class val PropertyHelper","title":"PropertyHelper"},{"location":"ponycheck-PropertyHelper/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-PropertyHelper/#create","text":"[Source] new val create( env': Env val, runner: _IPropertyRunner tag, run_notify: _PropertyRunNotify val, run_context: String val) : PropertyHelper val^","title":"create"},{"location":"ponycheck-PropertyHelper/#parameters","text":"env': Env val runner: _IPropertyRunner tag run_notify: _PropertyRunNotify val run_context: String val","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns","text":"PropertyHelper val^","title":"Returns"},{"location":"ponycheck-PropertyHelper/#public-fields","text":"","title":"Public fields"},{"location":"ponycheck-PropertyHelper/#let-env-env-val","text":"[Source]","title":"let env: Env val"},{"location":"ponycheck-PropertyHelper/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-PropertyHelper/#log","text":"[Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = false) : None val","title":"log"},{"location":"ponycheck-PropertyHelper/#parameters_1","text":"msg: String val verbose: Bool val = false","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_1","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#fail","text":"[Source] Flag the test as having failed. fun box fail( msg: String val = \"Test failed\") : None val","title":"fail"},{"location":"ponycheck-PropertyHelper/#parameters_2","text":"msg: String val = \"Test failed\"","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_2","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_false","text":"[Source] Assert that the given expression is false. fun box assert_false( predicate: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_false"},{"location":"ponycheck-PropertyHelper/#parameters_3","text":"predicate: Bool val msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_true","text":"[Source] Assert that the given expression is true. fun box assert_true( predicate: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_true"},{"location":"ponycheck-PropertyHelper/#parameters_4","text":"predicate: Bool val msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_error","text":"[Source] Assert that the given test function throws an error when run. fun box assert_error( test: {(): None ?} box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_error"},{"location":"ponycheck-PropertyHelper/#parameters_5","text":"test: {(): None ?} box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_no_error","text":"[Source] Assert that the given test function does not throw an error when run. fun box assert_no_error( test: {(): None ?} box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_no_error"},{"location":"ponycheck-PropertyHelper/#parameters_6","text":"test: {(): None ?} box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_6","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_isa-a","text":"[Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_is[A: A]"},{"location":"ponycheck-PropertyHelper/#parameters_7","text":"expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_7","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_isnta-a","text":"[Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_isnt[A: A]"},{"location":"ponycheck-PropertyHelper/#parameters_8","text":"not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_8","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_eqa-equatablea-read-stringable-read","text":"[Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponycheck-PropertyHelper/#parameters_9","text":"expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_9","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_nea-equatablea-read-stringable-read","text":"[Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponycheck-PropertyHelper/#parameters_10","text":"not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_10","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_array_eqa-equatablea-read-stringable-read","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal. fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponycheck-PropertyHelper/#parameters_11","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_11","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#assert_array_eq_unordereda-equatablea-read-stringable-read","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponycheck-PropertyHelper/#parameters_12","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_12","text":"Bool val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#expect_action","text":"[Source] expect some action of the given name to complete for the property to hold. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. Call complete_action(name) or fail_action(name) to mark some action as completed. Example: actor AsyncActor let _ph: PropertyHelper new create(ph: PropertyHelper) => _ph = ph be complete(s: String) => if (s.size() % 2) == 0 then _ph.complete_action(\"is_even\") else _ph.fail_action(\"is_even\") class EvenStringProperty is Property1[String] fun name(): String => \"even_string\" fun gen(): Generator[String] => Generators.ascii() fun property(arg1: String, ph: PropertyHelper) => ph.expect_action(\"is_even\") AsyncActor(ph).check(arg1) fun box expect_action( name: String val) : None val","title":"expect_action"},{"location":"ponycheck-PropertyHelper/#parameters_13","text":"name: String val","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_13","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#complete_action","text":"[Source] Complete an expected action successfully. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. If the action name was not expected, i.e. was not registered using expect_action , nothing happens. fun val complete_action( name: String val) : None val","title":"complete_action"},{"location":"ponycheck-PropertyHelper/#parameters_14","text":"name: String val","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_14","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#fail_action","text":"[Source] Mark an expected action as failed. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. fun val fail_action( name: String val) : None val","title":"fail_action"},{"location":"ponycheck-PropertyHelper/#parameters_15","text":"name: String val","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_15","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#complete","text":"[Source] Complete an asynchronous property successfully. Once this method is called the property is considered successful or failing depending on the value of the parameter success . For more fine grained control over completing or failing a property that consists of many steps, consider using expect_action , complete_action and fail_action . fun box complete( success: Bool val) : None val","title":"complete"},{"location":"ponycheck-PropertyHelper/#parameters_16","text":"success: Bool val","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_16","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyHelper/#dispose_when_done","text":"[Source] Dispose the actor after a property run / a shrink is done. fun box dispose_when_done( disposable: DisposableActor tag) : None val","title":"dispose_when_done"},{"location":"ponycheck-PropertyHelper/#parameters_17","text":"disposable: DisposableActor tag","title":"Parameters"},{"location":"ponycheck-PropertyHelper/#returns_17","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyLogger/","text":"PropertyLogger \u00b6 [Source] interface val PropertyLogger Public Functions \u00b6 log \u00b6 [Source] fun box log( msg: String val, verbose: Bool val = false) : None val Parameters \u00b6 msg: String val verbose: Bool val = false Returns \u00b6 None val","title":"interface PropertyLogger"},{"location":"ponycheck-PropertyLogger/#propertylogger","text":"[Source] interface val PropertyLogger","title":"PropertyLogger"},{"location":"ponycheck-PropertyLogger/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-PropertyLogger/#log","text":"[Source] fun box log( msg: String val, verbose: Bool val = false) : None val","title":"log"},{"location":"ponycheck-PropertyLogger/#parameters","text":"msg: String val verbose: Bool val = false","title":"Parameters"},{"location":"ponycheck-PropertyLogger/#returns","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyParams/","text":"PropertyParams \u00b6 [Source] Parameters to control Property Execution seed: the seed for the source of Randomness num_samples: the number of samples to produce from the property generator max_shrink_rounds: the maximum rounds of shrinking to perform max_generator_retries: the maximum number of retries to do if a generator fails to generate a sample timeout: the timeout for the ponytest runner, in nanoseconds async: if true the property is expected to finish asynchronously by calling PropertyHelper.complete(...) class val PropertyParams is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create( num_samples': USize val = 100, seed': U64 val = call, max_shrink_rounds': USize val = 10, max_generator_retries': USize val = 5, timeout': U64 val = 60000000000, async': Bool val = false) : PropertyParams val^ Parameters \u00b6 num_samples': USize val = 100 seed': U64 val = call max_shrink_rounds': USize val = 10 max_generator_retries': USize val = 5 timeout': U64 val = 60000000000 async': Bool val = false Returns \u00b6 PropertyParams val^ Public fields \u00b6 let seed: U64 val \u00b6 [Source] let num_samples: USize val \u00b6 [Source] let max_shrink_rounds: USize val \u00b6 [Source] let max_generator_retries: USize val \u00b6 [Source] let timeout: U64 val \u00b6 [Source] let async: Bool val \u00b6 [Source] Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"class PropertyParams"},{"location":"ponycheck-PropertyParams/#propertyparams","text":"[Source] Parameters to control Property Execution seed: the seed for the source of Randomness num_samples: the number of samples to produce from the property generator max_shrink_rounds: the maximum rounds of shrinking to perform max_generator_retries: the maximum number of retries to do if a generator fails to generate a sample timeout: the timeout for the ponytest runner, in nanoseconds async: if true the property is expected to finish asynchronously by calling PropertyHelper.complete(...) class val PropertyParams is Stringable box","title":"PropertyParams"},{"location":"ponycheck-PropertyParams/#implements","text":"Stringable box","title":"Implements"},{"location":"ponycheck-PropertyParams/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-PropertyParams/#create","text":"[Source] new val create( num_samples': USize val = 100, seed': U64 val = call, max_shrink_rounds': USize val = 10, max_generator_retries': USize val = 5, timeout': U64 val = 60000000000, async': Bool val = false) : PropertyParams val^","title":"create"},{"location":"ponycheck-PropertyParams/#parameters","text":"num_samples': USize val = 100 seed': U64 val = call max_shrink_rounds': USize val = 10 max_generator_retries': USize val = 5 timeout': U64 val = 60000000000 async': Bool val = false","title":"Parameters"},{"location":"ponycheck-PropertyParams/#returns","text":"PropertyParams val^","title":"Returns"},{"location":"ponycheck-PropertyParams/#public-fields","text":"","title":"Public fields"},{"location":"ponycheck-PropertyParams/#let-seed-u64-val","text":"[Source]","title":"let seed: U64 val"},{"location":"ponycheck-PropertyParams/#let-num_samples-usize-val","text":"[Source]","title":"let num_samples: USize val"},{"location":"ponycheck-PropertyParams/#let-max_shrink_rounds-usize-val","text":"[Source]","title":"let max_shrink_rounds: USize val"},{"location":"ponycheck-PropertyParams/#let-max_generator_retries-usize-val","text":"[Source]","title":"let max_generator_retries: USize val"},{"location":"ponycheck-PropertyParams/#let-timeout-u64-val","text":"[Source]","title":"let timeout: U64 val"},{"location":"ponycheck-PropertyParams/#let-async-bool-val","text":"[Source]","title":"let async: Bool val"},{"location":"ponycheck-PropertyParams/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-PropertyParams/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"ponycheck-PropertyParams/#returns_1","text":"String iso^","title":"Returns"},{"location":"ponycheck-PropertyResultNotify/","text":"PropertyResultNotify \u00b6 [Source] interface val PropertyResultNotify Public Functions \u00b6 fail \u00b6 [Source] called when a Property has failed (did not hold for a sample) or when execution errored. Does not necessarily denote completeness of the property execution, see complete(success: Bool) for that purpose. fun box fail( msg: String val) : None val Parameters \u00b6 msg: String val Returns \u00b6 None val complete \u00b6 [Source] called when the Property execution is complete signalling whether it was successful or not. fun box complete( success: Bool val) : None val Parameters \u00b6 success: Bool val Returns \u00b6 None val","title":"interface PropertyResultNotify"},{"location":"ponycheck-PropertyResultNotify/#propertyresultnotify","text":"[Source] interface val PropertyResultNotify","title":"PropertyResultNotify"},{"location":"ponycheck-PropertyResultNotify/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-PropertyResultNotify/#fail","text":"[Source] called when a Property has failed (did not hold for a sample) or when execution errored. Does not necessarily denote completeness of the property execution, see complete(success: Bool) for that purpose. fun box fail( msg: String val) : None val","title":"fail"},{"location":"ponycheck-PropertyResultNotify/#parameters","text":"msg: String val","title":"Parameters"},{"location":"ponycheck-PropertyResultNotify/#returns","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyResultNotify/#complete","text":"[Source] called when the Property execution is complete signalling whether it was successful or not. fun box complete( success: Bool val) : None val","title":"complete"},{"location":"ponycheck-PropertyResultNotify/#parameters_1","text":"success: Bool val","title":"Parameters"},{"location":"ponycheck-PropertyResultNotify/#returns_1","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyRunner/","text":"PropertyRunner[T: T] \u00b6 [Source] Actor executing a Property1 implementation in a way that allows garbage collection between single property executions, because it uses recursive behaviours for looping. actor tag PropertyRunner[T: T] Constructors \u00b6 create \u00b6 [Source] new tag create( p1: Property1[T] iso, params: PropertyParams val, notify: PropertyResultNotify val, logger: PropertyLogger val, env: Env val) : PropertyRunner[T] tag^ Parameters \u00b6 p1: Property1 [T] iso params: PropertyParams val notify: PropertyResultNotify val logger: PropertyLogger val env: Env val Returns \u00b6 PropertyRunner [T] tag^ Public Behaviours \u00b6 complete_run \u00b6 [Source] complete a property run this behaviour is called from the PropertyHelper or from _finished . be complete_run( round: USize val, success: Bool val) Parameters \u00b6 round: USize val success: Bool val run \u00b6 [Source] be run( round: USize val = 0) Parameters \u00b6 round: USize val = 0 complete_shrink \u00b6 [Source] be complete_shrink( failed_repr: String val, last_repr: String val, shrink_round: USize val, success: Bool val) Parameters \u00b6 failed_repr: String val last_repr: String val shrink_round: USize val success: Bool val do_shrink \u00b6 [Source] be do_shrink( failed_repr: String val, shrink_round: USize val = 0) Parameters \u00b6 failed_repr: String val shrink_round: USize val = 0 expect_action \u00b6 [Source] be expect_action( name: String val) Parameters \u00b6 name: String val complete_action \u00b6 [Source] be complete_action( name: String val, ph: PropertyHelper val) Parameters \u00b6 name: String val ph: PropertyHelper val fail_action \u00b6 [Source] be fail_action( name: String val, ph: PropertyHelper val) Parameters \u00b6 name: String val ph: PropertyHelper val dispose_when_done \u00b6 [Source] be dispose_when_done( disposable: DisposableActor tag) Parameters \u00b6 disposable: DisposableActor tag dispose \u00b6 [Source] be dispose() log \u00b6 [Source] be log( msg: String val, verbose: Bool val = false) Parameters \u00b6 msg: String val verbose: Bool val = false Public Functions \u00b6 complete \u00b6 [Source] complete the Property execution successfully fun ref complete() : None val Returns \u00b6 None val fail \u00b6 [Source] complete the Property execution while signalling failure to the notify fun ref fail( repr: String val, rounds: USize val = 0, err: Bool val = false) : None val Parameters \u00b6 repr: String val rounds: USize val = 0 err: Bool val = false Returns \u00b6 None val","title":"actor PropertyRunner"},{"location":"ponycheck-PropertyRunner/#propertyrunnert-t","text":"[Source] Actor executing a Property1 implementation in a way that allows garbage collection between single property executions, because it uses recursive behaviours for looping. actor tag PropertyRunner[T: T]","title":"PropertyRunner[T: T]"},{"location":"ponycheck-PropertyRunner/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-PropertyRunner/#create","text":"[Source] new tag create( p1: Property1[T] iso, params: PropertyParams val, notify: PropertyResultNotify val, logger: PropertyLogger val, env: Env val) : PropertyRunner[T] tag^","title":"create"},{"location":"ponycheck-PropertyRunner/#parameters","text":"p1: Property1 [T] iso params: PropertyParams val notify: PropertyResultNotify val logger: PropertyLogger val env: Env val","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#returns","text":"PropertyRunner [T] tag^","title":"Returns"},{"location":"ponycheck-PropertyRunner/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponycheck-PropertyRunner/#complete_run","text":"[Source] complete a property run this behaviour is called from the PropertyHelper or from _finished . be complete_run( round: USize val, success: Bool val)","title":"complete_run"},{"location":"ponycheck-PropertyRunner/#parameters_1","text":"round: USize val success: Bool val","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#run","text":"[Source] be run( round: USize val = 0)","title":"run"},{"location":"ponycheck-PropertyRunner/#parameters_2","text":"round: USize val = 0","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#complete_shrink","text":"[Source] be complete_shrink( failed_repr: String val, last_repr: String val, shrink_round: USize val, success: Bool val)","title":"complete_shrink"},{"location":"ponycheck-PropertyRunner/#parameters_3","text":"failed_repr: String val last_repr: String val shrink_round: USize val success: Bool val","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#do_shrink","text":"[Source] be do_shrink( failed_repr: String val, shrink_round: USize val = 0)","title":"do_shrink"},{"location":"ponycheck-PropertyRunner/#parameters_4","text":"failed_repr: String val shrink_round: USize val = 0","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#expect_action","text":"[Source] be expect_action( name: String val)","title":"expect_action"},{"location":"ponycheck-PropertyRunner/#parameters_5","text":"name: String val","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#complete_action","text":"[Source] be complete_action( name: String val, ph: PropertyHelper val)","title":"complete_action"},{"location":"ponycheck-PropertyRunner/#parameters_6","text":"name: String val ph: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#fail_action","text":"[Source] be fail_action( name: String val, ph: PropertyHelper val)","title":"fail_action"},{"location":"ponycheck-PropertyRunner/#parameters_7","text":"name: String val ph: PropertyHelper val","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#dispose_when_done","text":"[Source] be dispose_when_done( disposable: DisposableActor tag)","title":"dispose_when_done"},{"location":"ponycheck-PropertyRunner/#parameters_8","text":"disposable: DisposableActor tag","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#dispose","text":"[Source] be dispose()","title":"dispose"},{"location":"ponycheck-PropertyRunner/#log","text":"[Source] be log( msg: String val, verbose: Bool val = false)","title":"log"},{"location":"ponycheck-PropertyRunner/#parameters_9","text":"msg: String val verbose: Bool val = false","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-PropertyRunner/#complete","text":"[Source] complete the Property execution successfully fun ref complete() : None val","title":"complete"},{"location":"ponycheck-PropertyRunner/#returns_1","text":"None val","title":"Returns"},{"location":"ponycheck-PropertyRunner/#fail","text":"[Source] complete the Property execution while signalling failure to the notify fun ref fail( repr: String val, rounds: USize val = 0, err: Bool val = false) : None val","title":"fail"},{"location":"ponycheck-PropertyRunner/#parameters_10","text":"repr: String val rounds: USize val = 0 err: Bool val = false","title":"Parameters"},{"location":"ponycheck-PropertyRunner/#returns_2","text":"None val","title":"Returns"},{"location":"ponycheck-Randomness/","text":"Randomness \u00b6 [Source] Source of randomness, providing methods for generatic uniformly distributed values from a given closed interval: [min, max] in order for the user to be able to generate every possible value for a given primitive numeric type. All primitive number method create numbers in range [min, max) class ref Randomness Constructors \u00b6 create \u00b6 [Source] new ref create( seed1: U64 val = 42, seed2: U64 val = 0) : Randomness ref^ Parameters \u00b6 seed1: U64 val = 42 seed2: U64 val = 0 Returns \u00b6 Randomness ref^ Public Functions \u00b6 u8 \u00b6 [Source] generates a U8 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u8( min: U8 val = call, max: U8 val = call) : U8 val Parameters \u00b6 min: U8 val = call max: U8 val = call Returns \u00b6 U8 val u16 \u00b6 [Source] generates a U16 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u16( min: U16 val = call, max: U16 val = call) : U16 val Parameters \u00b6 min: U16 val = call max: U16 val = call Returns \u00b6 U16 val u32 \u00b6 [Source] generates a U32 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u32( min: U32 val = call, max: U32 val = call) : U32 val Parameters \u00b6 min: U32 val = call max: U32 val = call Returns \u00b6 U32 val u64 \u00b6 [Source] generates a U64 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u64( min: U64 val = call, max: U64 val = call) : U64 val Parameters \u00b6 min: U64 val = call max: U64 val = call Returns \u00b6 U64 val u128 \u00b6 [Source] generates a U128 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u128( min: U128 val = call, max: U128 val = call) : U128 val Parameters \u00b6 min: U128 val = call max: U128 val = call Returns \u00b6 U128 val ulong \u00b6 [Source] generates a ULong in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref ulong( min: ULong val = call, max: ULong val = call) : ULong val Parameters \u00b6 min: ULong val = call max: ULong val = call Returns \u00b6 ULong val usize \u00b6 [Source] generates a USize in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref usize( min: USize val = call, max: USize val = call) : USize val Parameters \u00b6 min: USize val = call max: USize val = call Returns \u00b6 USize val i8 \u00b6 [Source] generates a I8 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i8( min: I8 val = call, max: I8 val = call) : I8 val Parameters \u00b6 min: I8 val = call max: I8 val = call Returns \u00b6 I8 val i16 \u00b6 [Source] generates a I16 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i16( min: I16 val = call, max: I16 val = call) : I16 val Parameters \u00b6 min: I16 val = call max: I16 val = call Returns \u00b6 I16 val i32 \u00b6 [Source] generates a I32 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i32( min: I32 val = call, max: I32 val = call) : I32 val Parameters \u00b6 min: I32 val = call max: I32 val = call Returns \u00b6 I32 val i64 \u00b6 [Source] generates a I64 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i64( min: I64 val = call, max: I64 val = call) : I64 val Parameters \u00b6 min: I64 val = call max: I64 val = call Returns \u00b6 I64 val i128 \u00b6 [Source] generates a I128 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i128( min: I128 val = call, max: I128 val = call) : I128 val Parameters \u00b6 min: I128 val = call max: I128 val = call Returns \u00b6 I128 val ilong \u00b6 [Source] generates a ILong in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref ilong( min: ILong val = call, max: ILong val = call) : ILong val Parameters \u00b6 min: ILong val = call max: ILong val = call Returns \u00b6 ILong val isize \u00b6 [Source] generates a ISize in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref isize( min: ISize val = call, max: ISize val = call) : ISize val Parameters \u00b6 min: ISize val = call max: ISize val = call Returns \u00b6 ISize val f32 \u00b6 [Source] generates a F32 in closed interval [min, max] (default: [0.0, 1.0]) fun ref f32( min: F32 val = 0.0, max: F32 val = 1.0) : F32 val Parameters \u00b6 min: F32 val = 0.0 max: F32 val = 1.0 Returns \u00b6 F32 val f64 \u00b6 [Source] generates a F64 in closed interval [min, max] (default: [0.0, 1.0]) fun ref f64( min: F64 val = 0.0, max: F64 val = 1.0) : F64 val Parameters \u00b6 min: F64 val = 0.0 max: F64 val = 1.0 Returns \u00b6 F64 val bool \u00b6 [Source] generates a random Bool value fun ref bool() : Bool val Returns \u00b6 Bool val shuffle[T: T] \u00b6 [Source] fun ref shuffle[T: T]( array: Array[T] ref) : None val Parameters \u00b6 array: Array [T] ref Returns \u00b6 None val","title":"class Randomness"},{"location":"ponycheck-Randomness/#randomness","text":"[Source] Source of randomness, providing methods for generatic uniformly distributed values from a given closed interval: [min, max] in order for the user to be able to generate every possible value for a given primitive numeric type. All primitive number method create numbers in range [min, max) class ref Randomness","title":"Randomness"},{"location":"ponycheck-Randomness/#constructors","text":"","title":"Constructors"},{"location":"ponycheck-Randomness/#create","text":"[Source] new ref create( seed1: U64 val = 42, seed2: U64 val = 0) : Randomness ref^","title":"create"},{"location":"ponycheck-Randomness/#parameters","text":"seed1: U64 val = 42 seed2: U64 val = 0","title":"Parameters"},{"location":"ponycheck-Randomness/#returns","text":"Randomness ref^","title":"Returns"},{"location":"ponycheck-Randomness/#public-functions","text":"","title":"Public Functions"},{"location":"ponycheck-Randomness/#u8","text":"[Source] generates a U8 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u8( min: U8 val = call, max: U8 val = call) : U8 val","title":"u8"},{"location":"ponycheck-Randomness/#parameters_1","text":"min: U8 val = call max: U8 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponycheck-Randomness/#u16","text":"[Source] generates a U16 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u16( min: U16 val = call, max: U16 val = call) : U16 val","title":"u16"},{"location":"ponycheck-Randomness/#parameters_2","text":"min: U16 val = call max: U16 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_2","text":"U16 val","title":"Returns"},{"location":"ponycheck-Randomness/#u32","text":"[Source] generates a U32 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u32( min: U32 val = call, max: U32 val = call) : U32 val","title":"u32"},{"location":"ponycheck-Randomness/#parameters_3","text":"min: U32 val = call max: U32 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_3","text":"U32 val","title":"Returns"},{"location":"ponycheck-Randomness/#u64","text":"[Source] generates a U64 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u64( min: U64 val = call, max: U64 val = call) : U64 val","title":"u64"},{"location":"ponycheck-Randomness/#parameters_4","text":"min: U64 val = call max: U64 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_4","text":"U64 val","title":"Returns"},{"location":"ponycheck-Randomness/#u128","text":"[Source] generates a U128 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref u128( min: U128 val = call, max: U128 val = call) : U128 val","title":"u128"},{"location":"ponycheck-Randomness/#parameters_5","text":"min: U128 val = call max: U128 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_5","text":"U128 val","title":"Returns"},{"location":"ponycheck-Randomness/#ulong","text":"[Source] generates a ULong in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref ulong( min: ULong val = call, max: ULong val = call) : ULong val","title":"ulong"},{"location":"ponycheck-Randomness/#parameters_6","text":"min: ULong val = call max: ULong val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_6","text":"ULong val","title":"Returns"},{"location":"ponycheck-Randomness/#usize","text":"[Source] generates a USize in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref usize( min: USize val = call, max: USize val = call) : USize val","title":"usize"},{"location":"ponycheck-Randomness/#parameters_7","text":"min: USize val = call max: USize val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_7","text":"USize val","title":"Returns"},{"location":"ponycheck-Randomness/#i8","text":"[Source] generates a I8 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i8( min: I8 val = call, max: I8 val = call) : I8 val","title":"i8"},{"location":"ponycheck-Randomness/#parameters_8","text":"min: I8 val = call max: I8 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_8","text":"I8 val","title":"Returns"},{"location":"ponycheck-Randomness/#i16","text":"[Source] generates a I16 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i16( min: I16 val = call, max: I16 val = call) : I16 val","title":"i16"},{"location":"ponycheck-Randomness/#parameters_9","text":"min: I16 val = call max: I16 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_9","text":"I16 val","title":"Returns"},{"location":"ponycheck-Randomness/#i32","text":"[Source] generates a I32 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i32( min: I32 val = call, max: I32 val = call) : I32 val","title":"i32"},{"location":"ponycheck-Randomness/#parameters_10","text":"min: I32 val = call max: I32 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_10","text":"I32 val","title":"Returns"},{"location":"ponycheck-Randomness/#i64","text":"[Source] generates a I64 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i64( min: I64 val = call, max: I64 val = call) : I64 val","title":"i64"},{"location":"ponycheck-Randomness/#parameters_11","text":"min: I64 val = call max: I64 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_11","text":"I64 val","title":"Returns"},{"location":"ponycheck-Randomness/#i128","text":"[Source] generates a I128 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref i128( min: I128 val = call, max: I128 val = call) : I128 val","title":"i128"},{"location":"ponycheck-Randomness/#parameters_12","text":"min: I128 val = call max: I128 val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_12","text":"I128 val","title":"Returns"},{"location":"ponycheck-Randomness/#ilong","text":"[Source] generates a ILong in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref ilong( min: ILong val = call, max: ILong val = call) : ILong val","title":"ilong"},{"location":"ponycheck-Randomness/#parameters_13","text":"min: ILong val = call max: ILong val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_13","text":"ILong val","title":"Returns"},{"location":"ponycheck-Randomness/#isize","text":"[Source] generates a ISize in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. fun ref isize( min: ISize val = call, max: ISize val = call) : ISize val","title":"isize"},{"location":"ponycheck-Randomness/#parameters_14","text":"min: ISize val = call max: ISize val = call","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_14","text":"ISize val","title":"Returns"},{"location":"ponycheck-Randomness/#f32","text":"[Source] generates a F32 in closed interval [min, max] (default: [0.0, 1.0]) fun ref f32( min: F32 val = 0.0, max: F32 val = 1.0) : F32 val","title":"f32"},{"location":"ponycheck-Randomness/#parameters_15","text":"min: F32 val = 0.0 max: F32 val = 1.0","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_15","text":"F32 val","title":"Returns"},{"location":"ponycheck-Randomness/#f64","text":"[Source] generates a F64 in closed interval [min, max] (default: [0.0, 1.0]) fun ref f64( min: F64 val = 0.0, max: F64 val = 1.0) : F64 val","title":"f64"},{"location":"ponycheck-Randomness/#parameters_16","text":"min: F64 val = 0.0 max: F64 val = 1.0","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_16","text":"F64 val","title":"Returns"},{"location":"ponycheck-Randomness/#bool","text":"[Source] generates a random Bool value fun ref bool() : Bool val","title":"bool"},{"location":"ponycheck-Randomness/#returns_17","text":"Bool val","title":"Returns"},{"location":"ponycheck-Randomness/#shufflet-t","text":"[Source] fun ref shuffle[T: T]( array: Array[T] ref) : None val","title":"shuffle[T: T]"},{"location":"ponycheck-Randomness/#parameters_17","text":"array: Array [T] ref","title":"Parameters"},{"location":"ponycheck-Randomness/#returns_18","text":"None val","title":"Returns"},{"location":"ponycheck-ValueAndShrink/","text":"ValueAndShrink[T1: T1] \u00b6 [Source] Possible return type for Generator.generate . Represents a generated value and an Iterator of shrunken values. type ValueAndShrink[T1: T1] is (T1^ , Iterator[T1^] ref) Type Alias For \u00b6 (T1^ , Iterator [T1^] ref)","title":"type ValueAndShrink"},{"location":"ponycheck-ValueAndShrink/#valueandshrinkt1-t1","text":"[Source] Possible return type for Generator.generate . Represents a generated value and an Iterator of shrunken values. type ValueAndShrink[T1: T1] is (T1^ , Iterator[T1^] ref)","title":"ValueAndShrink[T1: T1]"},{"location":"ponycheck-ValueAndShrink/#type-alias-for","text":"(T1^ , Iterator [T1^] ref)","title":"Type Alias For"},{"location":"ponycheck-WeightedGenerator/","text":"WeightedGenerator[T: T] \u00b6 [Source] A generator with an associated weight, used in Generators.frequency. type WeightedGenerator[T: T] is (USize val , Generator[T] box) Type Alias For \u00b6 ( USize val , Generator [T] box)","title":"type WeightedGenerator"},{"location":"ponycheck-WeightedGenerator/#weightedgeneratort-t","text":"[Source] A generator with an associated weight, used in Generators.frequency. type WeightedGenerator[T: T] is (USize val , Generator[T] box)","title":"WeightedGenerator[T: T]"},{"location":"ponycheck-WeightedGenerator/#type-alias-for","text":"( USize val , Generator [T] box)","title":"Type Alias For"},{"location":"src/ponycheck/ascii_range/","text":"primitive ASCIINUL fun apply(): String => \"\\x00\" primitive ASCIIDigits fun apply(): String => \"0123456789\" primitive ASCIIWhiteSpace fun apply(): String => \" \\t\\n\\r\\x0b\\x0c\" primitive ASCIIPunctuation fun apply(): String => \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\" primitive ASCIILettersLower fun apply(): String => \"abcdefghijklmnopqrstuvwxyz\" primitive ASCIILettersUpper fun apply(): String => \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" primitive ASCIILetters fun apply(): String => ASCIILettersLower() + ASCIILettersUpper() primitive ASCIIPrintable fun apply(): String => ASCIIDigits() + ASCIILetters() + ASCIIPunctuation() + ASCIIWhiteSpace() primitive ASCIINonPrintable fun apply(): String => \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\" primitive ASCIIAll \"\"\" represents all ASCII characters excluding the NUL (\\x00) character for its special treatment in C strings \"\"\" fun apply(): String => ASCIIPrintable() + ASCIINonPrintable() primitive ASCIIAllWithNUL \"\"\" represents all ASCII characters including the NUL (\\x00) character for its special treatment in C strings \"\"\" fun apply(): String => ASCIIAll() + ASCIINUL() type ASCIIRange is ( ASCIINUL | ASCIIDigits | ASCIIWhiteSpace | ASCIIPunctuation | ASCIILettersLower | ASCIILettersUpper | ASCIILetters | ASCIIPrintable | ASCIINonPrintable | ASCIIAll | ASCIIAllWithNUL)","title":"Ascii range"},{"location":"src/ponycheck/for_all/","text":"use \"ponytest\" class ForAll[T] let _gen: Generator[T] val let _helper: TestHelper new create(gen': Generator[T] val, testHelper: TestHelper) => _gen = gen' _helper = testHelper fun ref apply(prop: {(T, PropertyHelper) ?} val) ? => \"\"\"execute\"\"\" Property1UnitTest[T]( object iso is Property1[T] fun name(): String => \"\" fun gen(): Generator[T] => _gen fun ref property(arg1: T, h: PropertyHelper) ? => prop(consume arg1, h)? end ).apply(_helper)? class ForAll2[T1, T2] let _gen1: Generator[T1] val let _gen2: Generator[T2] val let _helper: TestHelper new create( gen1': Generator[T1] val, gen2': Generator[T2] val, h: TestHelper) => _gen1 = gen1' _gen2 = gen2' _helper = h fun ref apply(prop: {(T1, T2, PropertyHelper) ?} val) ? => Property2UnitTest[T1, T2]( object iso is Property2[T1, T2] fun name(): String => \"\" fun gen1(): Generator[T1] => _gen1 fun gen2(): Generator[T2] => _gen2 fun ref property2(arg1: T1, arg2: T2, h: PropertyHelper) ? => prop(consume arg1, consume arg2, h)? end ).apply(_helper)? class ForAll3[T1, T2, T3] let _gen1: Generator[T1] val let _gen2: Generator[T2] val let _gen3: Generator[T3] val let _helper: TestHelper new create( gen1': Generator[T1] val, gen2': Generator[T2] val, gen3': Generator[T3] val, h: TestHelper) => _gen1 = gen1' _gen2 = gen2' _gen3 = gen3' _helper = h fun ref apply(prop: {(T1, T2, T3, PropertyHelper) ?} val) ? => Property3UnitTest[T1, T2, T3]( object iso is Property3[T1, T2, T3] fun name(): String => \"\" fun gen1(): Generator[T1] => _gen1 fun gen2(): Generator[T2] => _gen2 fun gen3(): Generator[T3] => _gen3 fun ref property3(arg1: T1, arg2: T2, arg3: T3, h: PropertyHelper) ? => prop(consume arg1, consume arg2, consume arg3, h)? end ).apply(_helper)? class ForAll4[T1, T2, T3, T4] let _gen1: Generator[T1] val let _gen2: Generator[T2] val let _gen3: Generator[T3] val let _gen4: Generator[T4] val let _helper: TestHelper new create( gen1': Generator[T1] val, gen2': Generator[T2] val, gen3': Generator[T3] val, gen4': Generator[T4] val, h: TestHelper) => _gen1 = gen1' _gen2 = gen2' _gen3 = gen3' _gen4 = gen4' _helper = h fun ref apply(prop: {(T1, T2, T3, T4, PropertyHelper) ?} val) ? => Property4UnitTest[T1, T2, T3, T4]( object iso is Property4[T1, T2, T3, T4] fun name(): String => \"\" fun gen1(): Generator[T1] => _gen1 fun gen2(): Generator[T2] => _gen2 fun gen3(): Generator[T3] => _gen3 fun gen4(): Generator[T4] => _gen4 fun ref property4(arg1: T1, arg2: T2, arg3: T3, arg4: T4, h: PropertyHelper) ? => prop(consume arg1, consume arg2, consume arg3, consume arg4, h)? end ).apply(_helper)?","title":"For all"},{"location":"src/ponycheck/generator/","text":"use \"collections\" use \"assert\" use \"itertools\" use \"debug\" type ValueAndShrink[T1] is (T1^, Iterator[T1^]) \"\"\" Possible return type for [`Generator.generate`](ponycheck-Generator.md#generate). Represents a generated value and an Iterator of shrunken values. \"\"\" type GenerateResult[T2] is (T2^ | ValueAndShrink[T2]) \"\"\" Return type for [`Generator.generate`](ponycheck-Generator.md#generate). Either a single value only or a Tuple of a value and an Iterator of shrunken values based upon this value. \"\"\" class CountdownIter[T: (Int & Integer[T] val) = USize] is Iterator[T] \"\"\" workaround until 0.21.0 is released and Range supports negative steps `from` is exclusive, `to` is inclusive \"\"\" var _cur: T let _to: T new create(from: T, to: T = T.min_value()) => _cur = from _to = to fun ref has_next(): Bool => _cur > _to fun ref next(): T => let res = _cur - 1 _cur = res res trait box GenObj[T] fun generate(rnd: Randomness): GenerateResult[T] ? fun shrink(t: T): ValueAndShrink[T] => (consume t, Poperator[T].empty()) fun generate_value(rnd: Randomness): T^ ? => \"\"\" simply generate a value and ignore any possible shrink values \"\"\" let g = this match g.generate(rnd)? | let t: T => consume t | (let t: T, _) => consume t end fun generate_and_shrink(rnd: Randomness): ValueAndShrink[T] ? => \"\"\" generate a value and also return a shrink result even if the generator does not return any when calling `generate`. \"\"\" let g = this match g.generate(rnd)? | let t: T => g.shrink(consume t) | (let t: T, let shrinks: Iterator[T^])=> (consume t, shrinks) end fun iter(rnd: Randomness): Iterator[GenerateResult[T]]^ => let that: GenObj[T] = this object is Iterator[GenerateResult[T]] fun ref has_next(): Bool => true fun ref next(): GenerateResult[T] ? => that.generate(rnd)? end fun value_iter(rnd: Randomness): Iterator[T^] => let that: GenObj[T] = this object is Iterator[T^] fun ref has_next(): Bool => true fun ref next(): T^ ? => match that.generate(rnd)? | let value_only: T => consume value_only | (let v: T, _) => consume v end end fun value_and_shrink_iter(rnd: Randomness): Iterator[ValueAndShrink[T]] => let that: GenObj[T] = this object is Iterator[ValueAndShrink[T]] fun ref has_next(): Bool => true fun ref next(): ValueAndShrink[T] ? => match that.generate(rnd)? | let value_only: T => that.shrink(consume value_only) | (let v: T, let shrinks: Iterator[T^]) => (consume v, consume shrinks) end end class box Generator[T] is GenObj[T] \"\"\" A Generator is capable of generating random values of a certain type `T` given a source of `Randomness` and knows how to shrink or simplify values of that type. When testing a property against one or more given Generators those generators' `generate` methods are being called many times to generate sample values that are then used to validate the property. When a failing sample is found, the ponycheck engine is trying to find a smaller or more simple sample by `shrinking` it. If the generator did not provide any shrinked samples as a result of `generate`, its `shrink` method is called to obtain simpler results. Ponycheck obtains more shrunken samples until the property is not failing anymore. The last failing sample, which is considered the most simple one, is then reported to the user. \"\"\" let _gen: GenObj[T] new create(gen: GenObj[T]) => _gen = gen fun generate(rnd: Randomness): GenerateResult[T] ? => \"\"\" Let this generator generate a value given a source of `Randomness`. Also allow for returning a value and pre-generated shrink results as a `ValueAndShrink[T]` instance, a tuple of `(T^, Seq[T])`. This helps propagating shrink results through all kinds of Generator combinators like `filter`, `map` and `flatMap`. If implementing a custom `Generator` based on another one, a Generator Combinator, you should use shrunken values returned by `generate` to also return shrunken values based on them If generating an example value is costly, it might be more efficient to simply return the generated value and only shrink in big steps or do no shrinking at all. If generating values is lightweight, shrunken values should also be returned. \"\"\" _gen.generate(rnd)? fun shrink(t: T): ValueAndShrink[T] => \"\"\" Simplify the given value. As the returned value can also be `iso`, it needs to be consumed and returned It is preffered to already return a `ValueAndShrink` from `generate`. \"\"\" _gen.shrink(consume t) fun generate_value(rnd: Randomness): T^ ? => _gen.generate_value(rnd)? fun generate_and_shrink(rnd: Randomness): ValueAndShrink[T] ? => _gen.generate_and_shrink(rnd)? fun filter(predicate: {(T): (T^, Bool)} box): Generator[T] => \"\"\" apply `predicate` to the values generated by this Generator and only values for which `predicate` returns `true`. Example: ```pony let even_i32s = Generators.i32() .filter( {(t) => (t, ((t % 2) == 0)) }) ``` \"\"\" Generator[T]( object is GenObj[T] fun generate(rnd: Randomness): GenerateResult[T] ? => (let t: T, let shrunken: Iterator[T^]) = _gen.generate_and_shrink(rnd)? (let t1, let matches) = predicate(consume t) if not matches then generate(rnd)? // recurse, this might recurse infinitely else // filter the shrunken examples (consume t1, _filter_shrunken(shrunken)) end fun shrink(t: T): ValueAndShrink[T] => \"\"\" shrink `t` using the generator this one filters upon and call the filter predicate on the shrunken values \"\"\" (let s, let shrunken: Iterator[T^]) = _gen.shrink(consume t) (consume s, _filter_shrunken(shrunken)) fun _filter_shrunken(shrunken: Iterator[T^]): Iterator[T^] => Iter[T^](shrunken) .filter_map[T^]({ (t: T): (T^| None) => match predicate(consume t) | (let matching: T, true) => consume matching end }) end) fun map[U](fn: {(T): U^} box) : Generator[U] => \"\"\" apply function `fn` to each value of this iterator and yield the results. Example: ```pony let single_code_point_string_gen = Generators.u32() .map[String]({(u) => String.from_utf32(u) }) ``` \"\"\" Generator[U]( object is GenObj[U] fun generate(rnd: Randomness): GenerateResult[U] ? => (let generated: T, let shrunken: Iterator[T^]) = _gen.generate_and_shrink(rnd)? (fn(consume generated), _map_shrunken(shrunken)) fun shrink(u: U): ValueAndShrink[U] => \"\"\" We can only shrink if T is a subtype of U. This method should in general not be called on this generator as it is always returning shrinks with the call to `generate` and they should be used for executing the shrink, but in case a strange hierarchy of generators is used, which does not make use of the pre-generated shrink results, we keep this method here. \"\"\" match u | let ut: T => (let uts: T, let shrunken: Iterator[T^]) = _gen.shrink(consume ut) (fn(consume uts), _map_shrunken(shrunken)) else (consume u, Poperator[U].empty()) end fun _map_shrunken(shrunken: Iterator[T^]): Iterator[U^] => Iter[T^](shrunken) .map[U^]({(t) => fn(consume t) }) end) fun flat_map[U](fn: {(T): Generator[U]} box): Generator[U] => \"\"\" For each value of this generator create a generator that is then combined. \"\"\" // TODO: enable proper shrinking: Generator[U]( object is GenObj[U] fun generate(rnd: Randomness): GenerateResult[U] ? => let value: T = _gen.generate_value(rnd)? fn(consume value).generate_and_shrink(rnd)? end) fun union[U](other: Generator[U]): Generator[(T | U)] => \"\"\" Create a generator that produces the value of this generator or the other with the same probability, returning a union type of this generator and the other one. \"\"\" Generator[(T | U)]( object is GenObj[(T | U)] fun generate(rnd: Randomness): GenerateResult[(T | U)] ? => if rnd.bool() then _gen.generate_and_shrink(rnd)? else other.generate_and_shrink(rnd)? end fun shrink(t: (T | U)): ValueAndShrink[(T | U)] => match consume t | let tt: T => _gen.shrink(consume tt) | let tu: U => other.shrink(consume tu) end end ) type WeightedGenerator[T] is (USize, Generator[T] box) \"\"\" A generator with an associated weight, used in Generators.frequency. \"\"\" primitive Generators \"\"\" Convenience combinators and factories for common types and kind of Generators. \"\"\" fun unit[T](t: T, do_shrink: Bool = false): Generator[box->T] => \"\"\" Generate a reference to the same value over and over again. This reference will be of type ``box->T`` and not just ``T`` as this generator will need to keep a reference to the given value. \"\"\" Generator[box->T]( object is GenObj[box->T] let _t: T = consume t fun generate(rnd: Randomness): GenerateResult[box->T] => if do_shrink then (_t, Iter[box->T].repeat_value(_t)) else _t end end) fun none[T: None](): Generator[(T | None)] => Generators.unit[(T | None)](None) fun repeatedly[T](f: {(): T^ ?} box): Generator[T] => \"\"\" Generate values by calling the lambda ``f`` repeatedly, once for every invocation of ``generate``. ``f`` needs to return an ephemeral type ``T^``, that means in most cases it needs to consume its returned value. Otherwise we would end up with an alias for ``T`` which is ``T!``. (e.g. ``String iso`` would be returned as ``String iso!`` which is a ``String tag``). Example: ```pony Generators.repeatedly[Writer]({(): Writer^ => let writer = Writer.>write(\"consume me, please\") consume writer }) ``` \"\"\" Generator[T]( object is GenObj[T] fun generate(rnd: Randomness): GenerateResult[T] ? => f()? end) fun seq_of[T, S: Seq[T] ref]( gen: Generator[T], min: USize = 0, max: USize = 100) : Generator[S] => \"\"\" Create a `Seq` from the values of the given Generator with an optional minimum and maximum size, defaults are 0 and 100 respectively. \"\"\" Generator[S]( object is GenObj[S] let _gen: GenObj[T] = gen fun generate(rnd: Randomness): GenerateResult[S] => let size = rnd.usize(min, max) let result: S = Iter[T^](_gen.value_iter(rnd)) .take(size) .collect[S](S.create(size)) // create shrink_iter with smaller seqs and elements generated from _gen.value_iter let shrink_iter = Iter[USize](CountdownIter(size, min)) //Range(size, min, -1)) // .skip(1) .map_stateful[S^]({ (s: USize): S^ => Iter[T^](_gen.value_iter(rnd)) .take(s) .collect[S](S.create(s)) }) (consume result, shrink_iter) end) fun iso_seq_of[T: Any #send, S: Seq[T] iso]( gen: Generator[T], min: USize = 0, max: USize = 100) : Generator[S] => \"\"\" Generate a `Seq[T]` where `T` must be sendable (have a reference capability of `tag`, `val` or `iso`). The constraint of the elements being sendable stems from the fact that there is no other way to populate the iso seq if the elements might be non-sendable (i.e. ref), as then the seq would leak references via its elements. \"\"\" Generator[S]( object is GenObj[S] let _gen: GenObj[T] = gen fun generate(rnd: Randomness): GenerateResult[S] => let size = rnd.usize(min, max) let result: S = recover iso S.create(size) end let iter = _gen.value_iter(rnd) var i = USize(0) for elem in iter do if i >= size then break end result.push(consume elem) i = i + 1 end // create shrink_iter with smaller seqs and elements generated from _gen.value_iter let shrink_iter = Iter[USize](CountdownIter(size, min)) //Range(size, min, -1)) // .skip(1) .map_stateful[S^]({ (s: USize): S^ => let res = recover iso S.create(s) end let s_iter = _gen.value_iter(rnd) var j = USize(0) for s_elem in s_iter do if j >= s then break end res.push(consume s_elem) j = j + 1 end consume res }) (consume result, shrink_iter) end ) fun array_of[T]( gen: Generator[T], min: USize = 0, max: USize = 100) : Generator[Array[T]] => Generators.seq_of[T, Array[T]](gen, min, max) fun shuffled_array_gen[T]( gen: Generator[Array[T]]) : Generator[Array[T]] => Generator[Array[T]]( object is GenObj[Array[T]] let _gen: GenObj[Array[T]] = gen fun generate(rnd: Randomness): GenerateResult[Array[T]] ? => (let arr, let source_shrink_iter) = _gen.generate_and_shrink(rnd)? rnd.shuffle[T](arr) let shrink_iter = Iter[Array[T]](source_shrink_iter) .map_stateful[Array[T]^]({ (shrink_arr: Array[T]): Array[T]^ => rnd.shuffle[T](shrink_arr) consume shrink_arr }) (consume arr, shrink_iter) end ) fun shuffled_iter[T](array: Array[T]): Generator[Iterator[this->T!]] => Generator[Iterator[this->T!]]( object is GenObj[Iterator[this->T!]] fun generate(rnd: Randomness): GenerateResult[Iterator[this->T!]] => let cloned = array.clone() rnd.shuffle[this->T!](cloned) cloned.values() end ) fun list_of[T]( gen: Generator[T], min: USize = 0, max: USize = 100) : Generator[List[T]] => Generators.seq_of[T, List[T]](gen, min, max) fun set_of[T: (Hashable #read & Equatable[T] #read)]( gen: Generator[T], max: USize = 100) : Generator[Set[T]] => \"\"\" Create a generator for ``Set`` filled with values of the given generator ``gen``. The returned sets will have a size up to ``max`` but tend to have fewer than ``max`` depending on the source generator ``gen``. E.g. if the given generator is for ``U8`` values and ``max`` is set to 1024 the set will only ever be of size 256 max. Also for efficiency purposes and to not loop forever this generator will only try to add at most ``max`` values to the set. If there are duplicates, the set won't grow. \"\"\" Generator[Set[T]]( object is GenObj[Set[T]] let _gen: GenObj[T] = gen fun generate(rnd: Randomness): GenerateResult[Set[T]] => let size = rnd.usize(0, max) let result: Set[T] = Set[T].create(size).>union( Iter[T^](_gen.value_iter(rnd)) .take(size) ) let shrink_iter: Iterator[Set[T]^] = Iter[USize](CountdownIter(size, 0)) // Range(size, 0, -1)) //.skip(1) .map_stateful[Set[T]^]({ (s: USize): Set[T]^ => Set[T].create(s).>union( Iter[T^](_gen.value_iter(rnd)).take(s) ) }) (consume result, shrink_iter) end) fun set_is_of[T]( gen: Generator[T], max: USize = 100) : Generator[SetIs[T]] => \"\"\" Create a generator for ``SetIs`` filled with values of the given generator ``gen``. The returned ``SetIs`` will have a size up to ``max`` but tend to have fewer entries depending on the source generator ``gen``. E.g. if the given generator is for ``U8`` values and ``max`` is set to 1024 the set will only ever be of size 256 max. Also for efficiency purposes and to not loop forever this generator will only try to add at most ``max`` values to the set. If there are duplicates, the set won't grow. \"\"\" // TODO: how to remove code duplications Generator[SetIs[T]]( object is GenObj[SetIs[T]] fun generate(rnd: Randomness): GenerateResult[SetIs[T]] => let size = rnd.usize(0, max) let result: SetIs[T] = SetIs[T].create(size).>union( Iter[T^](gen.value_iter(rnd)) .take(size) ) let shrink_iter: Iterator[SetIs[T]^] = Iter[USize](CountdownIter(size, 0)) //Range(size, 0, -1)) //.skip(1) .map_stateful[SetIs[T]^]({ (s: USize): SetIs[T]^ => SetIs[T].create(s).>union( Iter[T^](gen.value_iter(rnd)).take(s) ) }) (consume result, shrink_iter) end) fun map_of[K: (Hashable #read & Equatable[K] #read), V]( gen: Generator[(K, V)], max: USize = 100) : Generator[Map[K, V]] => \"\"\" Create a generator for ``Map`` from a generator of key-value tuples. The generated maps will have a size up to ``max`` but tend to have fewer entries depending on the source generator ``gen``. If the generator generates key-value pairs with duplicate keys (based on structural equality) the pair that is generated later will overwrite earlier entries in the map. \"\"\" Generator[Map[K, V]]( object is GenObj[Map[K, V]] fun generate(rnd: Randomness): GenerateResult[Map[K, V]] => let size = rnd.usize(0, max) let result: Map[K, V] = Map[K, V].create(size).>concat( Iter[(K^, V^)](gen.value_iter(rnd)) .take(size) ) let shrink_iter: Iterator[Map[K, V]^] = Iter[USize](CountdownIter(size, 0)) // Range(size, 0, -1)) // .skip(1) .map_stateful[Map[K, V]^]({ (s: USize): Map[K, V]^ => Map[K, V].create(s).>concat( Iter[(K^, V^)](gen.value_iter(rnd)).take(s) ) }) (consume result, shrink_iter) end) fun map_is_of[K, V]( gen: Generator[(K, V)], max: USize = 100) : Generator[MapIs[K, V]] => \"\"\" Create a generator for ``MapIs`` from a generator of key-value tuples. The generated maps will have a size up to ``max`` but tend to have fewer entries depending on the source generator ``gen``. If the generator generates key-value pairs with duplicate keys (based on identity) the pair that is generated later will overwrite earlier entries in the map. \"\"\" Generator[MapIs[K, V]]( object is GenObj[MapIs[K, V]] fun generate(rnd: Randomness): GenerateResult[MapIs[K, V]] => let size = rnd.usize(0, max) let result: MapIs[K, V] = MapIs[K, V].create(size).>concat( Iter[(K^, V^)](gen.value_iter(rnd)) .take(size) ) let shrink_iter: Iterator[MapIs[K, V]^] = Iter[USize](CountdownIter(size, 0)) //Range(size, 0, -1)) // .skip(1) .map_stateful[MapIs[K, V]^]({ (s: USize): MapIs[K, V]^ => MapIs[K, V].create(s).>concat( Iter[(K^, V^)](gen.value_iter(rnd)).take(s) ) }) (consume result, shrink_iter) end) fun one_of[T](xs: ReadSeq[T], do_shrink: Bool = false): Generator[box->T] => \"\"\" Generate a random value from the given ReadSeq. This generator will generate nothing if the given xs is empty. Generators created with this method do not support shrinking. If `do_shrink` is set to `true`, it will return the same value for each shrink round. Otherwise it will return nothing. \"\"\" Generator[box->T]( object is GenObj[box->T] fun generate(rnd: Randomness): GenerateResult[box->T] ? => let idx = rnd.usize(0, xs.size() - 1) let res = xs(idx)? if do_shrink then (res, Iter[box->T].repeat_value(res)) else res end end) fun one_of_safe[T](xs: ReadSeq[T], do_shrink: Bool = false): Generator[box->T] ? => \"\"\" Version of `one_of` that will error if `xs` is empty. \"\"\" Fact(xs.size() > 0, \"cannot use one_of_safe on empty ReadSeq\")? Generators.one_of[T](xs, do_shrink) fun frequency[T]( weighted_generators: ReadSeq[WeightedGenerator[T]]) : Generator[T] => \"\"\" chose a value of one of the given Generators, while controlling the distribution with the associated weights. The weights are of type ``USize`` and control how likely a value is chosen. The likelihood of a value ``v`` to be chosen is ``weight_v`` / ``weights_sum``. If all ``weighted_generators`` have equal size the distribution will be uniform. Example of a generator to output odd ``U8`` values twice as likely as even ones: ```pony Generators.frequency[U8]([ (1, Generators.u8().filter({(u) => (u, (u % 2) == 0 })) (2, Generators.u8().filter({(u) => (u, (u % 2) != 0 })) ]) ``` \"\"\" // nasty hack to avoid handling the theoretical error case where we have // no generator and thus would have to change the type signature Generator[T]( object is GenObj[T] fun generate(rnd: Randomness): GenerateResult[T] ? => let weight_sum: USize = Iter[WeightedGenerator[T]](weighted_generators.values()) .fold[USize]( 0, // segfaults when types are removed - TODO: investigate {(acc: USize, weighted_gen: WeightedGenerator[T]): USize^ => weighted_gen._1 + acc }) let desired_sum = rnd.usize(0, weight_sum) var running_sum: USize = 0 var chosen: (Generator[T] | None) = None for weighted_gen in weighted_generators.values() do let new_sum = running_sum + weighted_gen._1 if ((desired_sum == 0) or ((running_sum < desired_sum) and (desired_sum <= new_sum))) then // we just crossed or reached the desired sum chosen = weighted_gen._2 break else // update running sum running_sum = new_sum end end match chosen | let x: Generator[T] box => x.generate(rnd)? | None => Debug(\"chosen is None, desired_sum: \" + desired_sum.string() + \"running_sum: \" + running_sum.string()) error end end) fun frequency_safe[T]( weighted_generators: ReadSeq[WeightedGenerator[T]]) : Generator[T] ? => \"\"\" Version of `frequency` that errors if the given `weighted_generators` is empty. \"\"\" Fact(weighted_generators.size() > 0, \"cannot use frequency_safe on empty ReadSeq[WeightedGenerator]\")? Generators.frequency[T](weighted_generators) fun zip2[T1, T2]( gen1: Generator[T1], gen2: Generator[T2]) : Generator[(T1, T2)] => \"\"\" zip two generators into a generator of a 2-tuple containing the values generated by both generators. \"\"\" Generator[(T1, T2)]( object is GenObj[(T1, T2)] fun generate(rnd: Randomness): GenerateResult[(T1, T2)] ? => (let v1: T1, let shrinks1: Iterator[T1^]) = gen1.generate_and_shrink(rnd)? (let v2: T2, let shrinks2: Iterator[T2^]) = gen2.generate_and_shrink(rnd)? ((consume v1, consume v2), Iter[T1^](shrinks1).zip[T2^](shrinks2)) fun shrink(t: (T1, T2)): ValueAndShrink[(T1, T2)] => (let t1, let t2) = consume t (let t11, let t1_shrunken: Iterator[T1^]) = gen1.shrink(consume t1) (let t21, let t2_shrunken: Iterator[T2^]) = gen2.shrink(consume t2) let shrunken = Iter[T1^](t1_shrunken).zip[T2^](t2_shrunken) ((consume t11, consume t21), shrunken) end) fun zip3[T1, T2, T3]( gen1: Generator[T1], gen2: Generator[T2], gen3: Generator[T3]) : Generator[(T1, T2, T3)] => \"\"\" zip three generators into a generator of a 3-tuple containing the values generated by those three generators. \"\"\" Generator[(T1, T2, T3)]( object is GenObj[(T1, T2, T3)] fun generate(rnd: Randomness): GenerateResult[(T1, T2, T3)] ? => (let v1: T1, let shrinks1: Iterator[T1^]) = gen1.generate_and_shrink(rnd)? (let v2: T2, let shrinks2: Iterator[T2^]) = gen2.generate_and_shrink(rnd)? (let v3: T3, let shrinks3: Iterator[T3^]) = gen3.generate_and_shrink(rnd)? ((consume v1, consume v2, consume v3), Iter[T1^](shrinks1).zip2[T2^, T3^](shrinks2, shrinks3)) fun shrink(t: (T1, T2, T3)): ValueAndShrink[(T1, T2, T3)] => (let t1, let t2, let t3) = consume t (let t11, let t1_shrunken: Iterator[T1^]) = gen1.shrink(consume t1) (let t21, let t2_shrunken: Iterator[T2^]) = gen2.shrink(consume t2) (let t31, let t3_shrunken: Iterator[T3^]) = gen3.shrink(consume t3) let shrunken = Iter[T1^](t1_shrunken).zip2[T2^, T3^](t2_shrunken, t3_shrunken) ((consume t11, consume t21, consume t31), shrunken) end) fun zip4[T1, T2, T3, T4]( gen1: Generator[T1], gen2: Generator[T2], gen3: Generator[T3], gen4: Generator[T4]) : Generator[(T1, T2, T3, T4)] => \"\"\" zip four generators into a generator of a 4-tuple containing the values generated by those four generators. \"\"\" Generator[(T1, T2, T3, T4)]( object is GenObj[(T1, T2, T3, T4)] fun generate(rnd: Randomness): GenerateResult[(T1, T2, T3, T4)] ? => (let v1: T1, let shrinks1: Iterator[T1^]) = gen1.generate_and_shrink(rnd)? (let v2: T2, let shrinks2: Iterator[T2^]) = gen2.generate_and_shrink(rnd)? (let v3: T3, let shrinks3: Iterator[T3^]) = gen3.generate_and_shrink(rnd)? (let v4: T4, let shrinks4: Iterator[T4^]) = gen4.generate_and_shrink(rnd)? ((consume v1, consume v2, consume v3, consume v4), Iter[T1^](shrinks1).zip3[T2^, T3^, T4^](shrinks2, shrinks3, shrinks4)) fun shrink(t: (T1, T2, T3, T4)): ValueAndShrink[(T1, T2, T3, T4)] => (let t1, let t2, let t3, let t4) = consume t (let t11, let t1_shrunken) = gen1.shrink(consume t1) (let t21, let t2_shrunken) = gen2.shrink(consume t2) (let t31, let t3_shrunken) = gen3.shrink(consume t3) (let t41, let t4_shrunken) = gen4.shrink(consume t4) let shrunken = Iter[T1^](t1_shrunken) .zip3[T2^, T3^, T4^](t2_shrunken, t3_shrunken, t4_shrunken) ((consume t11, consume t21, consume t31, consume t41), shrunken) end) fun map2[T1, T2, T3]( gen1: Generator[T1], gen2: Generator[T2], fn: {(T1, T2): T3^}) : Generator[T3] => \"\"\" convenience combinator for mapping 2 generators into 1 \"\"\" Generators.zip2[T1, T2](gen1, gen2) .map[T3]({(arg) => (let arg1, let arg2) = consume arg fn(consume arg1, consume arg2) }) fun map3[T1, T2, T3, T4]( gen1: Generator[T1], gen2: Generator[T2], gen3: Generator[T3], fn: {(T1, T2, T3): T4^}) : Generator[T4] => \"\"\" convenience combinator for mapping 3 generators into 1 \"\"\" Generators.zip3[T1, T2, T3](gen1, gen2, gen3) .map[T4]({(arg) => (let arg1, let arg2, let arg3) = consume arg fn(consume arg1, consume arg2, consume arg3) }) fun map4[T1, T2, T3, T4, T5]( gen1: Generator[T1], gen2: Generator[T2], gen3: Generator[T3], gen4: Generator[T4], fn: {(T1, T2, T3, T4): T5^}) : Generator[T5] => \"\"\" convenience combinator for mapping 4 generators into 1 \"\"\" Generators.zip4[T1, T2, T3, T4](gen1, gen2, gen3, gen4) .map[T5]({(arg) => (let arg1, let arg2, let arg3, let arg4) = consume arg fn(consume arg1, consume arg2, consume arg3, consume arg4) }) fun bool(): Generator[Bool] => \"\"\" create a generator of bool values. \"\"\" Generator[Bool]( object is GenObj[Bool] fun generate(rnd: Randomness): Bool => rnd.bool() end) fun _int_shrink[T: (Int & Integer[T] val)](t: T^, min: T): ValueAndShrink[T] => \"\"\" \"\"\" let relation = t.compare(min) let t_copy: T = T.create(t) //Debug(t.string() + \" is \" + relation.string() + \" than min \" + min.string()) let sub_iter = object is Iterator[T^] var _cur: T = t_copy var _subtract: F64 = 1.0 var _overflow: Bool = false fun ref _next_minuend(): T => // f(x) = x + (2^-5 * x^2) T.from[F64](_subtract = _subtract + (0.03125 * _subtract * _subtract)) fun ref has_next(): Bool => match relation | Less => (_cur < min) and not _overflow | Equal => false | Greater => (_cur > min) and not _overflow end fun ref next(): T^ ? => match relation | Less => let minuend: T = _next_minuend() let old = _cur _cur = _cur + minuend if old > _cur then _overflow = true end old | Equal => error | Greater => let minuend: T = _next_minuend() let old = _cur _cur = _cur - minuend if old < _cur then _overflow = true end old end end let min_iter = match relation | let _: (Less | Greater) => Poperator[T]([min]) | Equal => Poperator[T].empty() end let shrunken_iter = Iter[T].chain( [ Iter[T^](sub_iter).skip(1) min_iter ].values()) (consume t, shrunken_iter) fun u8( min: U8 = U8.min_value(), max: U8 = U8.max_value()) : Generator[U8] => \"\"\" create a generator for U8 values \"\"\" let that = this Generator[U8]( object is GenObj[U8] fun generate(rnd: Randomness): U8^ => rnd.u8(min, max) fun shrink(u: U8): ValueAndShrink[U8] => that._int_shrink[U8](consume u, min) end) fun u16( min: U16 = U16.min_value(), max: U16 = U16.max_value()) : Generator[U16] => \"\"\" create a generator for U16 values \"\"\" let that = this Generator[U16]( object is GenObj[U16] fun generate(rnd: Randomness): U16^ => rnd.u16(min, max) fun shrink(u: U16): ValueAndShrink[U16] => that._int_shrink[U16](consume u, min) end) fun u32( min: U32 = U32.min_value(), max: U32 = U32.max_value()) : Generator[U32] => \"\"\" create a generator for U32 values \"\"\" let that = this Generator[U32]( object is GenObj[U32] fun generate(rnd: Randomness): U32^ => rnd.u32(min, max) fun shrink(u: U32): ValueAndShrink[U32] => that._int_shrink[U32](consume u, min) end) fun u64( min: U64 = U64.min_value(), max: U64 = U64.max_value()) : Generator[U64] => \"\"\" create a generator for U64 values \"\"\" let that = this Generator[U64]( object is GenObj[U64] fun generate(rnd: Randomness): U64^ => rnd.u64(min, max) fun shrink(u: U64): ValueAndShrink[U64] => that._int_shrink[U64](consume u, min) end) fun u128( min: U128 = U128.min_value(), max: U128 = U128.max_value()) : Generator[U128] => \"\"\" create a generator for U128 values \"\"\" let that = this Generator[U128]( object is GenObj[U128] fun generate(rnd: Randomness): U128^ => rnd.u128(min, max) fun shrink(u: U128): ValueAndShrink[U128] => that._int_shrink[U128](consume u, min) end) fun usize( min: USize = USize.min_value(), max: USize = USize.max_value()) : Generator[USize] => \"\"\" create a generator for USize values \"\"\" let that = this Generator[USize]( object is GenObj[USize] fun generate(rnd: Randomness): GenerateResult[USize] => rnd.usize(min, max) fun shrink(u: USize): ValueAndShrink[USize] => that._int_shrink[USize](consume u, min) end) fun ulong( min: ULong = ULong.min_value(), max: ULong = ULong.max_value()) : Generator[ULong] => \"\"\" create a generator for ULong values \"\"\" let that = this Generator[ULong]( object is GenObj[ULong] fun generate(rnd: Randomness): ULong^ => rnd.ulong(min, max) fun shrink(u: ULong): ValueAndShrink[ULong] => that._int_shrink[ULong](consume u, min) end) fun i8( min: I8 = I8.min_value(), max: I8 = I8.max_value()) : Generator[I8] => \"\"\" create a generator for I8 values \"\"\" let that = this Generator[I8]( object is GenObj[I8] fun generate(rnd: Randomness): I8^ => rnd.i8(min, max) fun shrink(i: I8): ValueAndShrink[I8] => that._int_shrink[I8](consume i, min) end) fun i16( min: I16 = I16.min_value(), max: I16 = I16.max_value()) : Generator[I16] => \"\"\" create a generator for I16 values \"\"\" let that = this Generator[I16]( object is GenObj[I16] fun generate(rnd: Randomness): I16^ => rnd.i16(min, max) fun shrink(i: I16): ValueAndShrink[I16] => that._int_shrink[I16](consume i, min) end) fun i32( min: I32 = I32.min_value(), max: I32 = I32.max_value()) : Generator[I32] => \"\"\" create a generator for I32 values \"\"\" let that = this Generator[I32]( object is GenObj[I32] fun generate(rnd: Randomness): I32^ => rnd.i32(min, max) fun shrink(i: I32): ValueAndShrink[I32] => that._int_shrink[I32](consume i, min) end) fun i64( min: I64 = I64.min_value(), max: I64 = I64.max_value()) : Generator[I64] => \"\"\" create a generator for I64 values \"\"\" let that = this Generator[I64]( object is GenObj[I64] fun generate(rnd: Randomness): I64^ => rnd.i64(min, max) fun shrink(i: I64): ValueAndShrink[I64] => that._int_shrink[I64](consume i, min) end) fun i128( min: I128 = I128.min_value(), max: I128 = I128.max_value()) : Generator[I128] => \"\"\" create a generator for I128 values \"\"\" let that = this Generator[I128]( object is GenObj[I128] fun generate(rnd: Randomness): I128^ => rnd.i128(min, max) fun shrink(i: I128): ValueAndShrink[I128] => that._int_shrink[I128](consume i, min) end) fun ilong( min: ILong = ILong.min_value(), max: ILong = ILong.max_value()) : Generator[ILong] => \"\"\" create a generator for ILong values \"\"\" let that = this Generator[ILong]( object is GenObj[ILong] fun generate(rnd: Randomness): ILong^ => rnd.ilong(min, max) fun shrink(i: ILong): ValueAndShrink[ILong] => that._int_shrink[ILong](consume i, min) end) fun isize( min: ISize = ISize.min_value(), max: ISize = ISize.max_value()) : Generator[ISize] => \"\"\" create a generator for ISize values \"\"\" let that = this Generator[ISize]( object is GenObj[ISize] fun generate(rnd: Randomness): ISize^ => rnd.isize(min, max) fun shrink(i: ISize): ValueAndShrink[ISize] => that._int_shrink[ISize](consume i, min) end) fun byte_string( gen: Generator[U8], min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for strings generated from the bytes returned by the generator ``gen`` with a minimum length of ``min`` (default: 0) and a maximum length of ``max`` (default: 100). \"\"\" Generator[String]( object is GenObj[String] fun generate(rnd: Randomness): GenerateResult[String] => let size = rnd.usize(min, max) let gen_iter = Iter[U8^](gen.value_iter(rnd)) .take(size) let arr: Array[U8] iso = recover Array[U8](size) end for b in gen_iter do arr.push(b) end String.from_iso_array(consume arr) fun shrink(s: String): ValueAndShrink[String] => \"\"\" shrink string until ``min`` length. \"\"\" var str: String = s.trim(0, s.size()-1) let shorten_iter: Iterator[String^] = object is Iterator[String^] fun ref has_next(): Bool => str.size() > min fun ref next(): String^ => str = str.trim(0, str.size()-1) end let min_iter = if s.size() > min then Poperator[String]([s.trim(0, min)]) else Poperator[String].empty() end let shrink_iter = Iter[String^].chain([ shorten_iter min_iter ].values()) (consume s, shrink_iter) end) fun ascii( min: USize = 0, max: USize = 100, range: ASCIIRange = ASCIIAll) : Generator[String] => \"\"\" create a generator for strings withing the given ``range`` with a minimum length of ``min`` (default: 0) and a maximum length of ``max`` (default: 100). \"\"\" let range_bytes = range.apply() let fallback = U8(0) let range_bytes_gen = usize(0, range_bytes.size()-1) .map[U8]({(size) => try range_bytes(size)? else // should never happen fallback end }) byte_string(range_bytes_gen, min, max) fun ascii_printable( min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for strings of printable ascii characters with a minimum length of ``min`` (default: 0) and a maximum length of ``max`` (default: 100). \"\"\" ascii(min, max, ASCIIPrintable) fun ascii_numeric( min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for strings of numeric ascii characters with a minimum length of ``min`` (default: 0) and a maximum length of ``max`` (default: 100). \"\"\" ascii(min, max, ASCIIDigits) fun ascii_letters( min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for strings of ascii letters with a minimum length of ``min`` (default: 0) and a maximum length of ``max`` (default: 100). \"\"\" ascii(min, max, ASCIILetters) fun utf32_codepoint_string( gen: Generator[U32], min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for strings from a generator of unicode codepoints with a minimum length of ``min`` codepoints (default: 0) and a maximum length of ``max`` codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. \"\"\" Generator[String]( object is GenObj[String] fun generate(rnd: Randomness): GenerateResult[String] => let size = rnd.usize(min, max) let gen_iter = Iter[U32^](gen.value_iter(rnd)) .filter({(cp) => // excluding surrogate pairs (cp <= 0xD7FF) or (cp >= 0xE000) }) .take(size) let s: String iso = recover String(size) end for code_point in gen_iter do s.push_utf32(code_point) end s fun shrink(s: String): ValueAndShrink[String] => \"\"\" strip off codepoints from the end, not just bytes, so we maintain a valid utf8 string only shrink until given ``min`` is hit \"\"\" var shrink_base = s let s_len = s.codepoints() let shrink_iter: Iterator[String^] = if s_len > min then Iter[String^].repeat_value(consume shrink_base) .map_stateful[String^]( object var len: USize = s_len - 1 fun ref apply(str: String): String => Generators._trim_codepoints(str, len = len - 1) end ).take(s_len - min) // take_while is buggy in pony < 0.21.0 //.take_while({(t) => t.codepoints() > min}) else Poperator[String].empty() end (consume s, shrink_iter) end) fun _trim_codepoints(s: String, trim_to: USize): String => recover val Iter[U32](s.runes()) .take(trim_to) .fold[String ref]( String.create(trim_to), {(acc, cp) => acc.>push_utf32(cp) }) end fun unicode( min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for unicode strings with a minimum length of ``min`` codepoints (default: 0) and a maximum length of ``max`` codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. \"\"\" let range_1 = u32(0x0, 0xD7FF) let range_1_size: USize = 0xD7FF // excluding surrogate pairs // this might be duplicate work but increases efficiency let range_2 = u32(0xE000, 0x10FFFF) let range_2_size = U32(0x10FFFF - 0xE000).usize() let code_point_gen = frequency[U32]([ (range_1_size, range_1) (range_2_size, range_2) ]) utf32_codepoint_string(code_point_gen, min, max) fun unicode_bmp( min: USize = 0, max: USize = 100) : Generator[String] => \"\"\" create a generator for unicode strings from the basic multilingual plane only with a minimum length of ``min`` codepoints (default: 0) and a maximum length of ``max`` codepoints (default: 100). Note that the byte length of the generated string can be up to 4 times the size in code points. \"\"\" let range_1 = u32(0x0, 0xD7FF) let range_1_size: USize = 0xD7FF // excluding surrogate pairs // this might be duplicate work but increases efficiency let range_2 = u32(0xE000, 0xFFFF) let range_2_size = U32(0xFFFF - 0xE000).usize() let code_point_gen = frequency[U32]([ (range_1_size, range_1) (range_2_size, range_2) ]) utf32_codepoint_string(code_point_gen, min, max)","title":"Generator"},{"location":"src/ponycheck/int_properties/","text":"primitive _StringifyIntArg fun apply(choice: U8, int: U128): String iso ^ => let num = match choice % 14 | 0 => \"U8(\" + int.u8().string() + \")\" | 1 => \"U16(\" + int.u16().string() + \")\" | 2 => \"U32(\" + int.u32().string() + \")\" | 3 => \"U64(\" + int.u64().string() + \")\" | 4 => \"ULong(\" + int.ulong().string() + \")\" | 5 => \"USize(\" + int.usize().string() + \")\" | 6 => \"U128(\" + int.string() + \")\" | 7 => \"I8(\" + int.i8().string() + \")\" | 8 => \"I16(\" + int.i16().string() + \")\" | 9 => \"I32(\" + int.i32().string() + \")\" | 10 => \"I64(\" + int.i64().string() + \")\" | 11 => \"ILong(\" + int.ilong().string() + \")\" | 12 => \"ISize(\" + int.isize().string() + \")\" | 13 => \"I128(\" + int.i128().string() + \")\" else \"\" end num.clone() class IntPropertySample is Stringable let choice: U8 let int: U128 new create(choice': U8, int': U128) => choice = choice' int = int' fun string(): String iso^ => _StringifyIntArg(choice, int) type IntUnitTest is Property1UnitTest[IntPropertySample] trait IntProperty is Property1[IntPropertySample] \"\"\" A property implementation for conveniently evaluating properties for all Pony Integer types at once. The property needs to be formulated inside the method `int_property`: ```pony class DivisionByZeroProperty is IntProperty fun name(): String => \"div/0\" fun int_property[T: (Int & Integer[T] val)](x: T, h: PropertyHelper)? => h.assert_eq[T](T.from[U8](0), x / T.from[U8](0)) ``` \"\"\" fun gen(): Generator[IntPropertySample] => Generators.map2[U8, U128, IntPropertySample]( Generators.u8(), Generators.u128(), {(choice, int) => IntPropertySample(choice, int) }) fun ref property(sample: IntPropertySample, h: PropertyHelper) ? => let x = sample.int match sample.choice % 14 | 0 => int_property[U8](x.u8(), h)? | 1 => int_property[U16](x.u16(), h)? | 2 => int_property[U32](x.u32(), h)? | 3 => int_property[U64](x.u64(), h)? | 4 => int_property[ULong](x.ulong(), h)? | 5 => int_property[USize](x.usize(), h)? | 6 => int_property[U128](x, h)? | 7 => int_property[I8](x.i8(), h)? | 8 => int_property[I16](x.i16(), h)? | 9 => int_property[I32](x.i32(), h)? | 10 => int_property[I64](x.i64(), h)? | 11 => int_property[ILong](x.ilong(), h)? | 12 => int_property[ISize](x.isize(), h)? | 13 => int_property[I128](x.i128(), h)? else h.log(\"rem is broken\") error end fun ref int_property[T: (Int & Integer[T] val)](x: T, h: PropertyHelper)? class IntPairPropertySample is Stringable let choice: U8 let int1: U128 let int2: U128 new create(choice': U8, int1': U128, int2': U128) => choice = choice' int1 = int1' int2 = int2' fun string(): String iso^ => let num1: String val = _StringifyIntArg(choice, int1) let num2: String val = _StringifyIntArg(choice, int2) \"\".join([\"(\"; num1; \", \"; num2; \")\"].values()) type IntPairUnitTest is Property1UnitTest[IntPairPropertySample] trait IntPairProperty is Property1[IntPairPropertySample] \"\"\" A property implementation for conveniently evaluating properties for pairs of integers of all Pony integer types at once. The property needs to be formulated inside the method `int_property`: ```pony class CommutativeMultiplicationProperty is IntPairProperty fun name(): String => \"commutativity/mul\" fun int_property[T: (Int & Integer[T] val)](x: T, y: T, h: PropertyHelper)? => h.assert_eq[T](x * y, y * x) ``` \"\"\" fun gen(): Generator[IntPairPropertySample] => Generators.map3[U8, U128, U128, IntPairPropertySample]( Generators.u8(), Generators.u128(), Generators.u128(), {(choice, int1, int2) => IntPairPropertySample(choice, int1, int2) }) fun ref property(sample: IntPairPropertySample, h: PropertyHelper) ? => let x = sample.int1 let y = sample.int2 match sample.choice % 14 | 0 => int_property[U8](x.u8(), y.u8(), h)? | 1 => int_property[U16](x.u16(), y.u16(), h)? | 2 => int_property[U32](x.u32(), y.u32(), h)? | 3 => int_property[U64](x.u64(), y.u64(), h)? | 4 => int_property[ULong](x.ulong(), y.ulong(), h)? | 5 => int_property[USize](x.usize(), y.usize(), h)? | 6 => int_property[U128](x, y, h)? | 7 => int_property[I8](x.i8(), y.i8(), h)? | 8 => int_property[I16](x.i16(), y.i16(), h)? | 9 => int_property[I32](x.i32(), y.i32(), h)? | 10 => int_property[I64](x.i64(), y.i64(), h)? | 11 => int_property[ILong](x.ilong(), y.ilong(), h)? | 12 => int_property[ISize](x.isize(), y.isize(), h)? | 13 => int_property[I128](x.i128(), y.i128(), h)? else h.log(\"rem is broken\") error end fun ref int_property[T: (Int & Integer[T] val)](x: T, y: T, h: PropertyHelper)?","title":"Int properties"},{"location":"src/ponycheck/ponycheck/","text":"\"\"\" Ponycheck is a library for property based testing with tight integration into ponytest. ## Property Based Testing In _traditional_ unit testing the developer specifies one or more input examples manually for the class or system under test and assert on certain output conditions. The difficulty here is to find enough examples to cover all branches and cases of the class or system under test. In property bases testing the developer defines a property, a kind of predicate for the class or system under test that should hold for all kinds or just a subset of possible input values. The property based testing engine then generates a big number of random input values and checks if the property holds for all of them. The developer only needs to specify the possible set of input values using a Generator. This testing technique is great for finding edge cases that would easily go unnoticed with manually constructed test samples. In general it can lead to much higher coverage than traditional unit-testing, with much less code to write. ## How Ponycheck implements Property Based Testing A property based test in ponycheck consists of the following: * A name (for integration into ponytest mostly) * One or more generators, depending on how your property is layed out. There are tons of them defined on primitive [Generators](ponycheck-Generators.md). * A `property` method that asserts a certain property for each sample generated by the [Generator(s)](ponycheck-Generator.md) with the help of [PropertyHelper](ponycheck-PropertyHelper.md) which tries to expose a similar API as [TestHelper](ponytest-TestHelper.md). * Optionally, the method ``params()`` can be used to configure how ponycheck executes the property by specifying a custom [PropertyParams](ponycheck-PropertyParams.md) object. The classical list-reverse example: ```pony use \"collections\" use \"ponycheck\" class ListReverseProperty is Property1[List[USize]] fun name(): String => \"list/reverse\" fun gen(): Generator[List[USize]] => Generators.list_of[USize](Generators.usize()) fun property(arg1: List[USize], ph: PropertyHelper) => ph.array_eq[USize](arg1, arg1.reverse().reverse()) ``` ## Integration into Ponytest There are two ways of integrating a [Property](ponycheck-Property1.md) into [ponytest](ponytest--index.md): 1. In order to pass your Property to the ponytest engine, you need to wrap it inside a [Property1UnitTest](ponycheck-Property1UnitTest.md). ```pony actor Main is TestList new create(env: Env) => PonyTest(env, this) fun tag tests(test: PonyTest) => test(Property1UnitTest[String](MyStringProperty)) ``` 2. Run as much [Properties](ponycheck-Property1.md) as you wish inside one ponytest [UnitTest](ponytest-UnitTest.md) using the convenience function [Ponycheck.for_all](ponycheck-Ponycheck.md#for_all) providing a [Generator](ponycheck-Generator), the [TestHelper](ponytest-TestHelper.md) and the actual property function. (Note that the property function is supplied in a second application of the result to `for_all`.) ```pony class ListReversePropertyWithinAUnitTest is UnitTest fun name(): String => \"list/reverse/forall\" fun apply(h: TestHelper) => let gen = recover val Generators.list_of[USize](Generators.usize()) end Ponycheck.for_all[List[USize]](gen, h)( {(sample, ph) => ph.array_eq[Usize](arg1, arg1.reverse().reverse()) }) // ... possibly more properties, using ``Ponycheck.for_all`` ``` Independent of how you integrate with [ponytest](ponytest--index.md), the ponycheck machinery will instantiate the provided Generator, and will execute it for a configurable number of samples. If the property fails using an assertion method of [PropertyHelper](ponycheck-PropertyHelper.md), the failed example will be shrunken by the generator to obtain a smaller and more informative, still failing, sample for reporting. \"\"\" use \"ponytest\" primitive Ponycheck fun for_all[T](gen: Generator[T] val, h: TestHelper): ForAll[T] => \"\"\" convenience method for running 1 to many properties as part of one ponytest UnitTest. Example: ```pony class MyTestWithSomeProperties is UnitTest fun name(): String => \"mytest/withMultipleProperties\" fun apply(h: TestHelper) => Ponycheck.for_all[U8](recover Generators.unit[U8](0) end, h)( {(u, h) => h.assert_eq(u, 0) consume u }) ``` \"\"\" ForAll[T](gen, h) fun for_all2[T1, T2]( gen1: Generator[T1] val, gen2: Generator[T2] val, h: TestHelper) : ForAll2[T1, T2] => ForAll2[T1, T2](gen1, gen2, h) fun for_all3[T1, T2, T3]( gen1: Generator[T1] val, gen2: Generator[T2] val, gen3: Generator[T3] val, h: TestHelper) : ForAll3[T1, T2, T3] => ForAll3[T1, T2, T3](gen1, gen2, gen3, h) fun for_all4[T1, T2, T3, T4]( gen1: Generator[T1] val, gen2: Generator[T2] val, gen3: Generator[T3] val, gen4: Generator[T4] val, h: TestHelper) : ForAll4[T1, T2, T3, T4] => ForAll4[T1, T2, T3, T4](gen1, gen2, gen3, gen4, h)","title":"Ponycheck"},{"location":"src/ponycheck/poperator/","text":"class ref Poperator[T] is Iterator[T^] \"\"\" iterate over a [Seq](builtin-Seq.md) descructively by `pop`ing its elements once `has_next()` returns `false`, the [Seq](builtin-Seq.md) is empty. Nominee for the annual pony class-naming awards. \"\"\" let _seq: Seq[T] new create(seq: Seq[T]) => _seq = seq new empty() => _seq = Array[T](0) fun ref has_next(): Bool => _seq.size() > 0 fun ref next(): T^ ? => _seq.pop()?","title":"Poperator"},{"location":"src/ponycheck/property/","text":"use \"time\" class val PropertyParams is Stringable \"\"\" Parameters to control Property Execution * seed: the seed for the source of Randomness * num_samples: the number of samples to produce from the property generator * max_shrink_rounds: the maximum rounds of shrinking to perform * max_generator_retries: the maximum number of retries to do if a generator fails to generate a sample * timeout: the timeout for the ponytest runner, in nanoseconds * async: if true the property is expected to finish asynchronously by calling `PropertyHelper.complete(...)` \"\"\" let seed: U64 let num_samples: USize let max_shrink_rounds: USize let max_generator_retries: USize let timeout: U64 let async: Bool new val create( num_samples': USize = 100, seed': U64 = Time.millis(), max_shrink_rounds': USize = 10, max_generator_retries': USize = 5, timeout': U64 = 60_000_000_000, async': Bool = false) => num_samples = num_samples' seed = seed' max_shrink_rounds = max_shrink_rounds' max_generator_retries = max_generator_retries' timeout = timeout' async = async' fun string(): String iso^ => recover String() .>append(\"Params(seed=\") .>append(seed.string()) .>append(\")\") end trait Property1[T] \"\"\" A property that consumes 1 argument of type `T`. A property is defined by a [Generator](ponycheck-Generator.md), returned by the [`gen()`](ponycheck-Property1.md#gen) method and a [`property`](ponycheck-Property1#property) method that consumes the generators output and verifies a custom property with the help of a [PropertyHelper](ponycheck-PropertyHelper.md). A property is verified if no failed assertion on [PropertyHelper](ponycheck-PropertyHelper.md) has been reported for all the samples it consumed. The property execution can be customized by returning a custom [PropertyParams](ponycheck-PropertyParams.md) from the [`params()`]*ponycheck-Property1.md#params) method. The [`gen()`](ponycheck-Property1.md#gen) method is called exactly once to instantiate the generator. The generator produces [PropertyParams.num_samples](ponycheck-PropertyParams.md#num_samples) samples and each is passed to the [property](ponycheck-Property1.md#property) method for verification. If the property did not verify, the given sample is shrunken, if the generator supports shrinking. The smallest shrunken sample will then be reported to the user. A [Property1](ponycheck-Property1.md) can be run with [Ponytest](ponytest--index.md). To that end it needs to be wrapped into a [Property1UnitTest](ponycheck-Property1UnitTest.md). \"\"\" fun name(): String \"\"\" The name of the property used for reporting during execution. \"\"\" fun params(): PropertyParams => \"\"\" Returns parameters to customize execution of this Property. \"\"\" PropertyParams fun gen(): Generator[T] \"\"\" The [Generator](ponycheck-Generator.md) used to produce samples to verify. \"\"\" fun ref property(arg1: T, h: PropertyHelper) ? \"\"\" A method verifying that a certain property holds for all given `arg1` with the help of [PropertyHelper](ponycheck-PropertyHelper.md) `h`. \"\"\" trait Property2[T1, T2] is Property1[(T1, T2)] fun gen1(): Generator[T1] \"\"\" The Generator for the first argument to your `property2`. \"\"\" fun gen2(): Generator[T2] \"\"\" The Generator for the second argument to your `property2`. \"\"\" fun gen(): Generator[(T1, T2)] => Generators.zip2[T1, T2]( gen1(), gen2()) fun ref property(arg1: (T1, T2), h: PropertyHelper) ? => (let x, let y) = consume arg1 property2(consume x, consume y, h)? fun ref property2(arg1: T1, arg2: T2, h: PropertyHelper) ? \"\"\" A method verifying that a certain property holds for all given `arg1` and `arg2` with the help of [PropertyHelper](ponycheck-PropertyHelper.md) `h`. \"\"\" trait Property3[T1, T2, T3] is Property1[(T1, T2, T3)] fun gen1(): Generator[T1] \"\"\" The Generator for the first argument to your `property3` method. \"\"\" fun gen2(): Generator[T2] \"\"\" The Generator for the second argument to your `property3` method. \"\"\" fun gen3(): Generator[T3] \"\"\" The Generator for the third argument to your `property3` method. \"\"\" fun gen(): Generator[(T1, T2, T3)] => Generators.zip3[T1, T2, T3]( gen1(), gen2(), gen3()) fun ref property(arg1: (T1, T2, T3), h: PropertyHelper) ? => (let x, let y, let z) = consume arg1 property3(consume x, consume y, consume z, h)? fun ref property3(arg1: T1, arg2: T2, arg3: T3, h: PropertyHelper) ? \"\"\" A method verifying that a certain property holds for all given `arg1`, `arg2` and `arg3` with the help of [PropertyHelper](ponycheck-PropertyHelper.md) `h`. \"\"\" trait Property4[T1, T2, T3, T4] is Property1[(T1, T2, T3, T4)] fun gen1(): Generator[T1] \"\"\" The Generator for the first argument to your `property4` method. \"\"\" fun gen2(): Generator[T2] \"\"\" The Generator for the second argument to your `property4` method. \"\"\" fun gen3(): Generator[T3] \"\"\" The Generator for the third argument to your `property4` method. \"\"\" fun gen4(): Generator[T4] \"\"\" The Generator for the fourth argument to your `property4` method. \"\"\" fun gen(): Generator[(T1, T2, T3, T4)] => Generators.zip4[T1, T2, T3, T4]( gen1(), gen2(), gen3(), gen4()) fun ref property(arg1: (T1, T2, T3, T4), h: PropertyHelper) ? => (let x1, let x2, let x3, let x4) = consume arg1 property4(consume x1, consume x2, consume x3, consume x4, h)? fun ref property4(arg1: T1, arg2: T2, arg3: T3, arg4: T4, h: PropertyHelper) ? \"\"\" A method verifying that a certain property holds for all given `arg1`, `arg2`, `arg3`, `arg4` with the help of [PropertyHelper](ponycheck-PropertyHelper.md) `h`. \"\"\"","title":"Property"},{"location":"src/ponycheck/property_helper/","text":"interface val _PropertyRunNotify \"\"\" simple callback for notifying the runner that a run completed \"\"\" fun apply(success: Bool) interface tag _IPropertyRunner \"\"\" interface for a PropertyRunner without the generic type parameter and only with the behaviours we are interested in. \"\"\" be expect_action(name: String) be complete_action(name: String, ph: PropertyHelper) be fail_action(name: String, ph: PropertyHelper) be dispose_when_done(disposable: DisposableActor) be log(msg: String, verbose: Bool = false) class val PropertyHelper \"\"\" Helper for ponycheck properties. Mirrors the [TestHelper](ponytest-TestHelper.md) API as close as possible. Contains assertion functions and functions for completing asynchronous properties, for expecting and completing or failing actions. Internally a new PropertyHelper will be created for each call to a property with a new sample and also for every shrink run. So don't assume anything about the identity of the PropertyHelper inside of your Properties. This class is `val` by default so it can be safely passed around to other actors. It exposes the process [Env](builtin-Env.md) as public `env` field in order to give access to the root authority and other stuff. \"\"\" let _runner: _IPropertyRunner let _run_notify: _PropertyRunNotify let _run_context: String let env: Env new val create(env': Env, runner: _IPropertyRunner, run_notify: _PropertyRunNotify, run_context: String) => env = env' _runner = runner _run_notify = run_notify _run_context = run_context /****** START DUPLICATION FROM TESTHELPER ********/ fun log(msg: String, verbose: Bool = false) => \"\"\" Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. \"\"\" _runner.log(msg, verbose) fun fail(msg: String = \"Test failed\") => \"\"\" Flag the test as having failed. \"\"\" _fail(msg) fun assert_false( predicate: Bool, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val => \"\"\" Assert that the given expression is false. \"\"\" if predicate then _fail(_fmt_msg(loc, \"Assert false failed. \" + msg)) return false end _runner.log(_fmt_msg(loc, \"Assert false passed. \" + msg)) true fun assert_true( predicate: Bool, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val => \"\"\" Assert that the given expression is true. \"\"\" if not predicate then _fail(_fmt_msg(loc, \"Assert true failed. \" + msg)) return false end _runner.log(_fmt_msg(loc, \"Assert true passed. \" + msg)) true fun assert_error( test: {(): None ?} box, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given test function throws an error when run. \"\"\" try test()? _fail(_fmt_msg(loc, \"Assert error failed. \" + msg)) false else _runner.log(_fmt_msg(loc, \"Assert error passed. \" + msg), true) true end fun assert_no_error( test: {(): None ?} box, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given test function does not throw an error when run. \"\"\" try test()? _runner.log(_fmt_msg(loc, \"Assert no error passed. \" + msg), true) true else _fail(_fmt_msg(loc, \"Assert no error failed. \" + msg)) false end fun assert_is[A]( expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions resolve to the same instance \"\"\" if expect isnt actual then _fail(_fmt_msg(loc, \"Assert is failed. \" + msg + \" Expected (\" + (digestof expect).string() + \") is (\" + (digestof actual).string() + \")\")) return false end _runner.log( _fmt_msg(loc, \"Assert is passed. \" + msg + \" Got (\" + (digestof expect).string() + \") is (\" + (digestof actual).string() + \")\"), true) true fun assert_isnt[A]( not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions resolve to different instances. \"\"\" if not_expect is actual then _fail(_fmt_msg(loc, \"Assert isn't failed. \" + msg + \" Expected (\" + (digestof not_expect).string() + \") isnt (\" + (digestof actual).string() + \")\")) return false end _runner.log( _fmt_msg(loc, \"Assert isn't passed. \" + msg + \" Got (\" + (digestof not_expect).string() + \") isnt (\" + (digestof actual).string() + \")\"), true) true fun assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions are equal. \"\"\" if expect != actual then _fail(_fmt_msg(loc, \"Assert eq failed. \" + msg + \" Expected (\" + expect.string() + \") == (\" + actual.string() + \")\")) return false end _runner.log(_fmt_msg(loc, \"Assert eq passed. \" + msg + \" Got (\" + expect.string() + \") == (\" + actual.string() + \")\"), true) true fun assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions are not equal. \"\"\" if not_expect == actual then _fail(_fmt_msg(loc, \"Assert ne failed. \" + msg + \" Expected (\" + not_expect.string() + \") != (\" + actual.string() + \")\")) return false end _runner.log( _fmt_msg(loc, \"Assert ne passed. \" + msg + \" Got (\" + not_expect.string() + \") != (\" + actual.string() + \")\"), true) true fun assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the contents of the 2 given ReadSeqs are equal. \"\"\" var ok = true if expect.size() != actual.size() then ok = false else try var i: USize = 0 while i < expect.size() do if expect(i)? != actual(i)? then ok = false break end i = i + 1 end else ok = false end end if not ok then _fail(_fmt_msg(loc, \"Assert EQ failed. \" + msg + \" Expected (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\")) return false end _runner.log( _fmt_msg(loc, \"Assert EQ passed. \" + msg + \" Got (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\"), true) true fun assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the contents of the 2 given ReadSeqs are equal ignoring order. \"\"\" try let missing = Array[box->A] let consumed = Array[Bool].init(false, actual.size()) for e in expect.values() do var found = false var i: USize = -1 for a in actual.values() do i = i + 1 if consumed(i)? then continue end if e == a then consumed.update(i, true)? found = true break end end if not found then missing.push(e) end end let extra = Array[box->A] for (i, c) in consumed.pairs() do if not c then extra.push(actual(i)?) end end if (extra.size() != 0) or (missing.size() != 0) then _fail( _fmt_msg(loc, \"Assert EQ_UNORDERED failed. \" + msg + \" Expected (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \"):\" + \"\\nMissing: \" + _print_array[box->A](missing) + \"\\nExtra: \" + _print_array[box->A](extra) ) ) return false end _runner.log( _fmt_msg( loc, \"Assert EQ_UNORDERED passed. \" + msg + \" Got (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\" ), true ) true else _fail(\"Assert EQ_UNORDERED failed from an internal error.\") false end fun _print_array[A: Stringable #read](array: ReadSeq[A]): String => \"\"\" Generate a printable string of the contents of the given readseq to use in error messages. \"\"\" \"[len=\" + array.size().string() + \": \" + \", \".join(array.values()) + \"]\" /****** END DUPLICATION FROM TESTHELPER *********/ fun expect_action(name: String) => \"\"\" expect some action of the given name to complete for the property to hold. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. Call `complete_action(name)` or `fail_action(name)` to mark some action as completed. Example: ```pony actor AsyncActor let _ph: PropertyHelper new create(ph: PropertyHelper) => _ph = ph be complete(s: String) => if (s.size() % 2) == 0 then _ph.complete_action(\"is_even\") else _ph.fail_action(\"is_even\") class EvenStringProperty is Property1[String] fun name(): String => \"even_string\" fun gen(): Generator[String] => Generators.ascii() fun property(arg1: String, ph: PropertyHelper) => ph.expect_action(\"is_even\") AsyncActor(ph).check(arg1) ``` \"\"\" _runner.expect_action(name) fun val complete_action(name: String) => \"\"\" Complete an expected action successfully. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. If the action `name` was not expected, i.e. was not registered using `expect_action`, nothing happens. \"\"\" _runner.complete_action(name, this) fun val fail_action(name: String) => \"\"\" Mark an expected action as failed. If all expected actions are completed successfully, the property is considered successful. If 1 action fails, the property is considered failing. \"\"\" _runner.fail_action(name, this) fun complete(success: Bool) => \"\"\" Complete an asynchronous property successfully. Once this method is called the property is considered successful or failing depending on the value of the parameter `success`. For more fine grained control over completing or failing a property that consists of many steps, consider using `expect_action`, `complete_action` and `fail_action`. \"\"\" _run_notify.apply(success) fun dispose_when_done(disposable: DisposableActor) => \"\"\" Dispose the actor after a property run / a shrink is done. \"\"\" _runner.dispose_when_done(disposable) fun _fail(msg: String) => _runner.log(msg) _run_notify.apply(false) fun _fmt_msg(loc: SourceLoc, msg: String): String => let msg_prefix = _run_context + \" \" + _format_loc(loc) if msg.size() > 0 then msg_prefix + \": \" + msg else msg_prefix end fun _format_loc(loc: SourceLoc): String => loc.file() + \":\" + loc.line().string()","title":"Property helper"},{"location":"src/ponycheck/property_runner/","text":"use \"debug\" use \"collections\" interface val PropertyLogger fun log(msg: String, verbose: Bool = false) interface val PropertyResultNotify fun fail(msg: String) \"\"\" called when a Property has failed (did not hold for a sample) or when execution errored. Does not necessarily denote completeness of the property execution, see `complete(success: Bool)` for that purpose. \"\"\" fun complete(success: Bool) \"\"\" called when the Property execution is complete signalling whether it was successful or not. \"\"\" actor PropertyRunner[T] \"\"\" Actor executing a Property1 implementation in a way that allows garbage collection between single property executions, because it uses recursive behaviours for looping. \"\"\" let _prop1: Property1[T] let _params: PropertyParams let _rnd: Randomness let _notify: PropertyResultNotify let _gen: Generator[T] let _logger: PropertyLogger let _env: Env let _expected_actions: Set[String] = Set[String] let _disposables: Array[DisposableActor] = Array[DisposableActor] var _shrinker: Iterator[T^] = _EmptyIterator[T^] var _sample_repr: String = \"\" var _pass: Bool = true // keep track of which runs/shrinks we expect var _expected_round: USize = 0 new create( p1: Property1[T] iso, params: PropertyParams, notify: PropertyResultNotify, logger: PropertyLogger, env: Env ) => _env = env _prop1 = consume p1 _params = params _logger = logger _notify = notify _rnd = Randomness(_params.seed) _gen = _prop1.gen() // RUNNING PROPERTIES // be complete_run(round: USize, success: Bool) => \"\"\" complete a property run this behaviour is called from the PropertyHelper or from `_finished`. \"\"\" // verify that this is an expected call if _expected_round != round then _logger.log(\"unexpected complete msg for run \" + round.string() + \". expecting run \" + _expected_round.string(), true) return else _expected_round = round + 1 end _pass = success // in case of sync property - signal failure if not success then // found a bad example, try to shrink it if not _shrinker.has_next() then _logger.log(\"no shrinks available\") fail(_sample_repr, 0) else _expected_round = 0 // reset rounds for shrinking do_shrink(_sample_repr) end else // property holds, recurse run(round + 1) end fun ref _generate_with_retry(max_retries: USize): ValueAndShrink[T] ? => var tries: USize = 0 repeat try return _gen.generate_and_shrink(_rnd)? else tries = tries + 1 end until (tries > max_retries) end error be run(round: USize = 0) => if round >= _params.num_samples then complete() // all samples have been successful return end // prepare property run (var sample, _shrinker) = try _generate_with_retry(_params.max_generator_retries)? else // break out if we were not able to generate a sample _notify.fail( \"Unable to generate samples from the given iterator, tried \" + _params.max_generator_retries.string() + \" times.\" + \" (round: \" + round.string() + \")\") _notify.complete(false) return end // create a string representation before consuming ``sample`` with property (sample, _sample_repr) = _Stringify.apply[T](consume sample) let run_notify = recover val this~complete_run(round) end let helper = PropertyHelper(_env, this, run_notify, _params.string() + \" Run(\" + round.string() + \")\") _pass = true // will be set to false by fail calls try _prop1.property(consume sample, helper)? else fail(_sample_repr, 0 where err=true) return end // dispatch to another behavior // as complete_run might have set _pass already through a call to // complete_run _run_finished(round) be _run_finished(round: USize) => if not _params.async and _pass then // otherwise complete_run has already been called complete_run(round, true) end // SHRINKING // be complete_shrink(failed_repr: String, last_repr: String, shrink_round: USize, success: Bool) => // verify that this is an expected call if _expected_round != shrink_round then _logger.log(\"unexpected complete msg for shrink run \" + shrink_round.string() + \". expecting run \" + _expected_round.string(), true) return else _expected_round = shrink_round + 1 end _pass = success // in case of sync property - signal failure if success then // we have a sample that did not fail and thus can stop shrinking fail(failed_repr, shrink_round) else // we have a failing shrink sample, recurse do_shrink(last_repr, shrink_round + 1) end be do_shrink(failed_repr: String, shrink_round: USize = 0) => // shrink iters can be infinite, so we need to limit // the examples we consider during shrinking if shrink_round == _params.max_shrink_rounds then fail(failed_repr, shrink_round) return end (let shrink, let current_repr) = try _Stringify.apply[T](_shrinker.next()?) else // no more shrink samples, report previous failed example fail(failed_repr, shrink_round) return end // callback for asynchronous shrinking or aborting on error case let run_notify = recover val this~complete_shrink(failed_repr, current_repr, shrink_round) end let helper = PropertyHelper( _env, this, run_notify, _params.string() + \" Shrink(\" + shrink_round.string() + \")\") _pass = true // will be set to false by fail calls try _prop1.property(consume shrink, helper)? else fail(current_repr, shrink_round where err=true) return end // dispatch to another behaviour // to ensure _complete_shrink has been called already _shrink_finished(failed_repr, current_repr, shrink_round) be _shrink_finished( failed_repr: String, current_repr: String, shrink_round: USize) => if not _params.async and _pass then // directly complete the shrink run complete_shrink(failed_repr, current_repr, shrink_round, true) end // interface towards PropertyHelper be expect_action(name: String) => _logger.log(\"Action expected: \" + name) _expected_actions.set(name) be complete_action(name: String, ph: PropertyHelper) => _logger.log(\"Action completed: \" + name) _finish_action(name, true, ph) be fail_action(name: String, ph: PropertyHelper) => _logger.log(\"Action failed: \" + name) _finish_action(name, false, ph) fun ref _finish_action(name: String, success: Bool, ph: PropertyHelper) => try _expected_actions.extract(name)? // call back into the helper to invoke the current run_notify // that we don't have access to otherwise if not success then ph.complete(false) elseif _expected_actions.size() == 0 then ph.complete(true) end else _logger.log(\"action '\" + name + \"' finished unexpectedly. ignoring.\") end be dispose_when_done(disposable: DisposableActor) => _disposables.push(disposable) be dispose() => _dispose() fun ref _dispose() => for disposable in Poperator[DisposableActor](_disposables) do disposable.dispose() end be log(msg: String, verbose: Bool = false) => _logger.log(msg, verbose) // end interface towards PropertyHelper fun ref complete() => \"\"\" complete the Property execution successfully \"\"\" _notify.complete(true) fun ref fail(repr: String, rounds: USize = 0, err: Bool = false) => \"\"\" complete the Property execution while signalling failure to the notify \"\"\" if err then _report_error(repr, rounds) else _report_failed(repr, rounds) end _notify.complete(false) fun _report_error(sample_repr: String, shrink_rounds: USize = 0, loc: SourceLoc = __loc) => \"\"\" report an error that happened during property evaluation and signal failure to the notify \"\"\" _notify.fail( \"Property errored for sample \" + sample_repr + \" (after \" + shrink_rounds.string() + \" shrinks)\" ) fun _report_failed(sample_repr: String, shrink_rounds: USize = 0, loc: SourceLoc = __loc) => \"\"\" report a failed property and signal failure to the notify \"\"\" _notify.fail( \"Property failed for sample \" + sample_repr + \" (after \" + shrink_rounds.string() + \" shrinks)\" ) class _EmptyIterator[T] fun ref has_next(): Bool => false fun ref next(): T^ ? => error primitive _Stringify fun apply[T](t: T): (T^, String) => \"\"\"turn anything into a string\"\"\" let digest = (digestof t) let s = match t | let str: Stringable => str.string() | let rs: ReadSeq[Stringable] => \"[\" + \" \".join(rs.values()) + \"]\" | (let s1: Stringable, let s2: Stringable) => \"(\" + s1.string() + \", \" + s2.string() + \")\" | (let s1: Stringable, let s2: ReadSeq[Stringable]) => \"(\" + s1.string() + \", [\" + \" \".join(s2.values()) + \"])\" | (let s1: ReadSeq[Stringable], let s2: Stringable) => \"([\" + \" \".join(s1.values()) + \"], \" + s2.string() + \")\" | (let s1: ReadSeq[Stringable], let s2: ReadSeq[Stringable]) => \"([\" + \" \".join(s1.values()) + \"], [\" + \" \".join(s2.values()) + \"])\" | (let s1: Stringable, let s2: Stringable, let s3: Stringable) => \"(\" + s1.string() + \", \" + s2.string() + \", \" + s3.string() + \")\" | ((let s1: Stringable, let s2: Stringable), let s3: Stringable) => \"((\" + s1.string() + \", \" + s2.string() + \"), \" + s3.string() + \")\" | (let s1: Stringable, (let s2: Stringable, let s3: Stringable)) => \"(\" + s1.string() + \", (\" + s2.string() + \", \" + s3.string() + \"))\" else \"<identity:\" + digest.string() + \">\" end (consume t, consume s)","title":"Property runner"},{"location":"src/ponycheck/randomness/","text":"use \"random\" class ref Randomness \"\"\" Source of randomness, providing methods for generatic uniformly distributed values from a given closed interval: [min, max] in order for the user to be able to generate every possible value for a given primitive numeric type. All primitive number method create numbers in range [min, max) \"\"\" let _random: Random new ref create(seed1: U64 = 42, seed2: U64 = 0) => _random = Rand(seed1, seed2) fun ref u8(min: U8 = U8.min_value(), max: U8 = U8.max_value()): U8 => \"\"\" generates a U8 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" if (min == U8.min_value()) and (max == U8.max_value()) then _random.u8() else min + _random.int((max - min).u64() + 1).u8() end fun ref u16(min: U16 = U16.min_value(), max: U16 = U16.max_value()): U16 => \"\"\" generates a U16 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" if (min == U16.min_value()) and (max == U16.max_value()) then _random.u16() else min + _random.int((max - min).u64() + 1).u16() end fun ref u32(min: U32 = U32.min_value(), max: U32 = U32.max_value()): U32 => \"\"\" generates a U32 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" if (min == U32.min_value()) and (max == U32.max_value()) then _random.u32() else min + _random.int((max - min).u64() + 1).u32() end fun ref u64(min: U64 = U64.min_value(), max: U64 = U64.max_value()): U64 => \"\"\" generates a U64 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" if (min == U64.min_value()) and (max == U64.max_value()) then _random.u64() elseif min > U32.max_value().u64() then (u32((min >> 32).u32(), (max >> 32).u32()).u64() << 32) or _random.u32().u64() elseif max > U32.max_value().u64() then let high = (u32((min >> 32).u32(), (max >> 32).u32()).u64() << 32).u64() let low = if high > 0 then _random.u32().u64() else u32(min.u32(), U32.max_value()).u64() end high or low else // range within U32 range u32(min.u32(), max.u32()).u64() end fun ref u128( min: U128 = U128.min_value(), max: U128 = U128.max_value()) : U128 => \"\"\" generates a U128 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" if (min == U128.min_value()) and (max == U128.max_value()) then _random.u128() elseif min > U64.max_value().u128() then // both above U64 range - chose random low 64 bits (u64((min >> 64).u64(), (max >> 64).u64()).u128() << 64) or u64().u128() elseif max > U64.max_value().u128() then // min below U64 max value let high = (u64((min >> 64).u64(), (max >> 64).u64()).u128() << 64) let low = if high > 0 then // number will be bigger than U64 max anyway, so chose a random lower u64 u64().u128() else // number <= U64 max, so chose lower u64 while considering requested range min u64(min.u64(), U64.max_value()).u128() end high or low else // range within u64 range u64(min.u64(), max.u64()).u128() end fun ref ulong( min: ULong = ULong.min_value(), max: ULong = ULong.max_value()) : ULong => \"\"\" generates a ULong in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" u64(min.u64(), max.u64()).ulong() fun ref usize( min: USize = USize.min_value(), max: USize = USize.max_value()) : USize => \"\"\" generates a USize in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" u64(min.u64(), max.u64()).usize() fun ref i8(min: I8 = I8.min_value(), max: I8 = I8.max_value()): I8 => \"\"\" generates a I8 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + u8(0, (max - min).u8()).i8() fun ref i16(min: I16 = I16.min_value(), max: I16 = I16.max_value()): I16 => \"\"\" generates a I16 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + u16(0, (max - min).u16()).i16() fun ref i32(min: I32 = I32.min_value(), max: I32 = I32.max_value()): I32 => \"\"\" generates a I32 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + u32(0, (max - min).u32()).i32() fun ref i64(min: I64 = I64.min_value(), max: I64 = I64.max_value()): I64 => \"\"\" generates a I64 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + u64(0, (max - min).u64()).i64() fun ref i128( min: I128 = I128.min_value(), max: I128 = I128.max_value()) : I128 => \"\"\" generates a I128 in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + u128(0, (max - min).u128()).i128() fun ref ilong( min: ILong = ILong.min_value(), max: ILong = ILong.max_value()) : ILong => \"\"\" generates a ILong in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + ulong(0, (max - min).ulong()).ilong() fun ref isize( min: ISize = ISize.min_value(), max: ISize = ISize.max_value()) : ISize => \"\"\" generates a ISize in closed interval [min, max] (default: [min_value, max_value]) behavior is undefined if min > max. \"\"\" min + usize(0, (max - min).usize()).isize() fun ref f32(min: F32 = 0.0, max: F32 = 1.0): F32 => \"\"\" generates a F32 in closed interval [min, max] (default: [0.0, 1.0]) \"\"\" (_random.real().f32() * (max-min)) + min fun ref f64(min: F64 = 0.0, max: F64 = 1.0): F64 => \"\"\" generates a F64 in closed interval [min, max] (default: [0.0, 1.0]) \"\"\" (_random.real() * (max-min)) + min fun ref bool(): Bool => \"\"\" generates a random Bool value \"\"\" (_random.next() % 2) == 0 fun ref shuffle[T](array: Array[T] ref) => _random.shuffle[T](array)","title":"Randomness"}]}